1
00:00:05,360 --> 00:00:10,040
每天早上醒來，最讓我興奮的事莫過於換上同樣的衣服。

2
00:00:10,040 --> 00:00:15,200
最讓我興奮的事情莫過於連續更改 20 次相同的畫素值，讓我覺得自己在做一件非常有價值的事情。

3
00:00:15,200 --> 00:00:21,240
為人類做出了巨大的貢獻。既然你們是 css 專家，根據我的社群帖子，我想實現

4
00:00:21,240 --> 00:00:26,920
成為 CSS 搖滾明星的畢生抱負。這本 css 佈局指南，不是關於

5
00:00:26,920 --> 00:00:31,460
解釋每一個可能的 CSS 屬性和值，因為外面有大量的資源

6
00:00:31,460 --> 00:00:35,360
可以告訴你如何做到這一點。不過，我想說的是，你應該如何處理和思考 CSS 佈局。

7
00:00:35,360 --> 00:00:41,420
這樣你的 css 就不會像我們工程師的社交能力一樣混亂。現在，這適用於任何

8
00:00:41,420 --> 00:00:46,660
CSS庫、後處理器、元件或任何你能想到的東西，因為它更多的是關於

9
00:00:46,660 --> 00:00:50,980
方法。現在，有一些罕見的文章可以解釋我所說的內容、

10
00:00:51,160 --> 00:00:55,860
但我想在影片中介紹一下，並進一步說明如何處理每一個小

11
00:00:55,860 --> 00:01:01,140
步驟。因此，當你得到一個需要用 CSS 實現的設計時，首先要做的是

12
00:01:01,140 --> 00:01:05,600
要做的第一件事，就是用方框將一切視覺化。首先

13
00:01:05,600 --> 00:01:10,920
首先，我們要談談 CSS 框模型。CSS 方框模型代表了所有層

14
00:01:10,920 --> 00:01:18,000
一個方框。因此，我們包括內容、填充、邊框和邊距。預設情況下，CSS 會設定

15
00:01:18,000 --> 00:01:23,400
預設情況下，CSS 將所有內容都設定為內容框，即只包含內容。因此，這就代表了一個元素、

16
00:01:23,640 --> 00:01:27,900
但如果設定為 border box，就會包含 padding 和 border。所以，一旦你理解了

17
00:01:27,900 --> 00:01:32,800
現在，我們可以將佈局分割成不同的區塊。我們希望能夠

18
00:01:32,800 --> 00:01:38,580
將頁面上的每個元素都視覺化為一個塊。如圖所示，我們從外部開始

19
00:01:38,580 --> 00:01:44,580
然後進入內部。我們總是從頂部開始橫向佈局。我們不會

20
00:01:44,580 --> 00:01:50,120
因為 div 會自然地疊加在一起，所以我們要確保從頂部開始

21
00:01:50,120 --> 00:01:56,920
所以我們要確保從水平方向開始，將元素分割成不同的塊。例如，如果我們將 YouTube 登陸頁面

22
00:01:56,920 --> 00:02:03,160
我們可以切換 Chrome 瀏覽器擴充套件，這樣就可以將頁面上的所有元素都顯示為不同的方框。

23
00:02:03,160 --> 00:02:07,900
因此，如果將滑鼠懸停在這裡，我們會看到導航欄，這裡還有另一個方框，如

24
00:02:07,900 --> 00:02:14,840
這裡和這裡，以及每個影片本身都是一個方框。現在你

25
00:02:14,840 --> 00:02:19,620
可以想象，如果你使用的是框架，將這些方框視覺化也有助於設定

26
00:02:19,620 --> 00:02:24,000
設定 React、Vue、Angular 或其他框架所需的元件。

27
00:02:24,000 --> 00:02:29,860
Svelte 等框架所需的元件，因此這些元件非常適合這些盒子，正如我們在

28
00:02:29,860 --> 00:02:32,540
一些佈局中，最重要的事情是

29
00:02:32,540 --> 00:02:37,620
最重要的一點是，所有東西都有父子關係。因此每個

30
00:02:37,620 --> 00:02:42,220
元素都有父元素和子元素，而這種父子

31
00:02:42,220 --> 00:02:46,340
關係對於我們理解如何使用 Flexbox

32
00:02:46,340 --> 00:02:52,140
和網格佈局的關鍵。現在，我們透過塊來實現佈局的視覺化

33
00:02:52,140 --> 00:02:57,960
確實有助於為我們的整個 CSS 程式碼和

34
00:02:57,960 --> 00:03:00,660
這有助於我們利用一個非常重要的工具

35
00:03:00,660 --> 00:03:02,760
我們所熟知的 Flexbox。

36
00:03:02,980 --> 00:03:05,460
現在，有幾種定位工具

37
00:03:05,460 --> 00:03:07,600
工具，但首要工具

38
00:03:07,600 --> 00:03:10,320
是 Flexbox。

39
00:03:10,760 --> 00:03:12,360
還有一個工具叫 float

40
00:03:12,360 --> 00:03:14,160
來定位、

41
00:03:14,280 --> 00:03:16,800
但這種定位方式已經過時了、

42
00:03:17,040 --> 00:03:19,100
只有當你喜歡受苦時，你才應該使用它。

43
00:03:19,440 --> 00:03:21,640
現在，我們來談談 Flexbox 與絕對定位的區別、

44
00:03:21,820 --> 00:03:23,940
很多人傾向於使用絕對定位

45
00:03:23,940 --> 00:03:25,220
作為預設方法、

46
00:03:25,360 --> 00:03:27,640
我認為這是一個基本錯誤、

47
00:03:27,640 --> 00:03:29,180
原因有以下幾點

48
00:03:29,300 --> 00:03:31,460
首先，它更難實現響應式設計。

49
00:03:31,680 --> 00:03:34,760
舉例來說，如果你將某項內容設定為 150 畫素

50
00:03:34,760 --> 00:03:36,900
的東西

51
00:03:36,900 --> 00:03:39,820
它的位置就會大不相同

52
00:03:39,820 --> 00:03:42,140
在 3000 畫素的螢幕上

53
00:03:42,140 --> 00:03:45,320
與 300 畫素的移動螢幕相比

54
00:03:45,320 --> 00:03:48,380
而右邊 150 畫素的位置則在中間。

55
00:03:48,740 --> 00:03:49,680
除此之外

56
00:03:49,740 --> 00:03:51,620
這將導致你在設計

57
00:03:51,620 --> 00:03:55,920
這並不理想。

58
00:03:55,920 --> 00:04:00,200
現在，有一個更大的理由可以解釋為什麼你應該始終使用 flexbox 而不是絕對定位

59
00:04:00,200 --> 00:04:04,940
因為 Flexbox 不會影響佈局的流暢性。

60
00:04:05,240 --> 00:04:09,980
這意味著，如果你看看這個佈局，再看看這個導航欄

61
00:04:09,980 --> 00:04:12,260
每個專案都是相互關聯的。

62
00:04:12,440 --> 00:04:17,200
例如，這個專案與這個專案是相關的，因為它們在同一行上，而且它們是

63
00:04:17,200 --> 00:04:18,880
位置靠右。

64
00:04:19,000 --> 00:04:24,360
但是，如果你看一下這個夜間圖示，並將其移除

65
00:04:24,360 --> 00:04:26,620
會發生什麼呢？

66
00:04:26,620 --> 00:04:29,020
移動，這並不理想，有時

67
00:04:29,020 --> 00:04:31,120
您不需要這麼大的空間

68
00:04:31,120 --> 00:04:32,760
讓我們

69
00:04:32,760 --> 00:04:34,880
實際上，我們還可以去掉這個輪廓

70
00:04:34,880 --> 00:04:37,580
現在，這兩個專案之間就有了很大的空隙

71
00:04:37,580 --> 00:04:40,020
這就要求我們

72
00:04:40,020 --> 00:04:42,380
定位，把它移到這裡

73
00:04:42,380 --> 00:04:44,340
相比之下，這很麻煩

74
00:04:44,340 --> 00:04:46,640
讓我們看看 Flexbox，我們有這些

75
00:04:46,640 --> 00:04:48,520
項，讓我們看看

76
00:04:48,520 --> 00:04:49,960
當我們去掉

77
00:04:49,960 --> 00:04:52,500
設定圖示時會發生什麼。我們可以看到

78
00:04:52,500 --> 00:04:56,360
和這個一起移動了。然後，讓我們實際移除配置檔案圖示。

79
00:04:56,560 --> 00:05:01,800
正如你所看到的，它被移到了這裡，所以很容易

80
00:05:01,800 --> 00:05:06,460
以我們喜歡的方式進行設定。我們的生活更輕鬆了，因為我們

81
00:05:06,460 --> 00:05:11,120
因為我們遵循了佈局的流程，它們與

82
00:05:11,120 --> 00:05:16,640
每個專案的其他位置的關係。因此，即使在搜尋欄中，它的位置也是

83
00:05:16,640 --> 00:05:20,380
右側，搜尋則在左側。所以有

84
00:05:20,380 --> 00:05:26,100
因此，頁面上有很多專案時，流程總是動態的。

85
00:05:26,100 --> 00:05:32,320
使用 Flexbox 更易於維護。如果你曾經嘗試過修復程式碼

86
00:05:32,320 --> 00:05:36,160
程式碼庫，你就會開始意識到這一點

87
00:05:36,160 --> 00:05:41,040
這將成為維護的噩夢，因為您必須不斷地計算畫素

88
00:05:41,040 --> 00:05:46,580
並將事物放置在不同的位置。當涉及到

89
00:05:46,580 --> 00:05:48,820
的理想工具。

90
00:05:49,200 --> 00:05:52,160
現在，Flexbox 有很多特性、

91
00:05:52,460 --> 00:05:54,300
但實際上只有幾個屬性

92
00:05:54,300 --> 00:05:55,460
真正需要了解的屬性。

93
00:05:55,640 --> 00:05:57,840
瞭解這些屬性非常重要

94
00:05:57,840 --> 00:06:00,780
我之前提到的親子關係、

95
00:06:01,180 --> 00:06:03,360
因為你要在父元素上使用不同的屬性

96
00:06:03,360 --> 00:06:04,740
不同的屬性

97
00:06:05,090 --> 00:06:07,400
上使用不同的屬性。

98
00:06:07,900 --> 00:06:10,200
因此，父元素屬性會有

99
00:06:10,200 --> 00:06:11,880
所有這些屬性、

100
00:06:11,960 --> 00:06:14,700
但我們關心的是

101
00:06:14,700 --> 00:06:19,700
只是顯示、對齊內容和對齊項。

102
00:06:19,920 --> 00:06:23,200
只有這三個屬性是你真正需要知道的。

103
00:06:23,380 --> 00:06:26,420
即使是對齊內容和對齊專案。

104
00:06:26,660 --> 00:06:29,040
每個屬性都只有幾個。

105
00:06:29,320 --> 00:06:33,280
在使用 Flexbox 時，有一份小抄在手會非常方便。

106
00:06:33,580 --> 00:06:37,740
你可以利用它來檢視並直觀地瞭解這些屬性的作用。

107
00:06:38,300 --> 00:06:42,900
證明內容是最常用的 Flexbox 父屬性

108
00:06:42,900 --> 00:06:44,340
最常用的 Flexbox 父屬性。

109
00:06:44,340 --> 00:06:48,200
justify content 對齊專案或子專案

110
00:06:48,200 --> 00:06:50,040
以水平方向對齊、

111
00:06:50,040 --> 00:06:52,580
或預設方向。

112
00:06:52,940 --> 00:06:54,460
因此，我們有了 Flex start 和 Flex end、

113
00:06:54,680 --> 00:06:56,960
居中、中間空格和四周空格。

114
00:06:57,620 --> 00:07:00,920
因此，空格、左右空格、居中是最常見的對齊方式。

115
00:07:00,920 --> 00:07:03,720
偶爾也會用到彈性起始、彈性結束。

116
00:07:03,900 --> 00:07:06,680
第二種最常用的對齊方式是

117
00:07:06,680 --> 00:07:08,700
是對齊內容、

118
00:07:08,880 --> 00:07:11,680
這與 "內容對齊 "幾乎是一回事、

119
00:07:11,820 --> 00:07:14,160
但它會將內容垂直對齊。

120
00:07:14,160 --> 00:07:18,640
因此，我們有了 flexStart、flexEnd、center、spaceBetween 和
spaceAround。

121
00:07:18,860 --> 00:07:21,480
最常用的是

122
00:07:21,480 --> 00:07:26,760
是居中，因為很多時候我們只需對齊一條水平線。

123
00:07:27,000 --> 00:07:31,380
因此，即使是在一個基本的例子中，你也可以看到，這就是柔性，就在這裡

124
00:07:31,380 --> 00:07:35,760
然後我們在這個特殊的 div 之間使用空格，將所有內容間隔開來。

125
00:07:36,060 --> 00:07:38,420
然後這裡也是一樣，這是另一個父物件

126
00:07:38,420 --> 00:07:41,840
然後這些是帶有導航專案的子代

127
00:07:41,840 --> 00:07:43,700
這些都是空格。

128
00:07:43,700 --> 00:07:48,120
請注意，在這裡，我們還對它們進行了垂直對齊，因此我們使用了 align

129
00:07:48,120 --> 00:07:53,180
內容居中。因此，這是最常用的方法之一。

130
00:07:53,180 --> 00:07:58,000
設定佈局的最常用方法之一。現在，你可以使用 Flex-Wrap 的另一個屬性

131
00:07:58,000 --> 00:08:02,760
但我會向你展示一些方法，這樣你就不需要使用 Flex-Wrap 了。現在

132
00:08:02,760 --> 00:08:06,640
說到 FlexBox 的子屬性，只有幾個屬性

133
00:08:06,640 --> 00:08:09,840
你只需偶爾使用。所以

134
00:08:09,840 --> 00:08:14,260
例如，如果你將其設定為零，它將佔用

135
00:08:14,260 --> 00:08:18,040
空間，但如果你點選其中一個，它就會

136
00:08:18,040 --> 00:08:22,440
如果該元素有多餘的空間，它就會盡可能增大。而且

137
00:08:22,440 --> 00:08:26,940
我們還擁有 flex-basis，所以 flex-basis 比 寬度還要更靈活。

138
00:08:26,940 --> 00:08:30,620
但它與寬度基本相同

139
00:08:30,620 --> 00:08:34,200
只是多了一些屬性並能更好地與 FlexBox 互動。

140
00:08:34,200 --> 00:08:38,640
如果你想深入瞭解 flex-basis，我會在說明中留下一個連結

141
00:08:38,640 --> 00:08:40,920
但你你應該始終使用彈性空間，而不是寬度

142
00:08:40,920 --> 00:08:42,340
但是，在使用 Flexbox 時，你應該始終將空格比寬度更靈活。

143
00:08:42,560 --> 00:08:44,520
因此，Flex 適用於以下情況

144
00:08:44,520 --> 00:08:46,020
這樣的情況、

145
00:08:46,260 --> 00:08:48,600
也就是說，它要麼是水平的，要麼是垂直的。

146
00:08:48,960 --> 00:08:51,560
但是，如果你有一個類似這樣的部分、

147
00:08:52,140 --> 00:08:55,220
既有水平元素又有垂直元素、

148
00:08:55,700 --> 00:08:57,680
那麼網格是更好的選擇。

149
00:08:57,880 --> 00:08:59,840
現在，即使在這樣的情況下

150
00:08:59,840 --> 00:09:01,060
的情況下

151
00:09:01,060 --> 00:09:02,920
以類似畫廊的格式顯示、

152
00:09:03,460 --> 00:09:05,540
網格仍然非常容易實現

153
00:09:05,540 --> 00:09:08,020
我們只需三行程式碼就能實現。

154
00:09:08,020 --> 00:09:12,480
但是，如果我們嘗試使用 flex，在這種情況下使用 flex 實際上會有問題。

155
00:09:12,820 --> 00:09:15,100
在第一行中，我們往往不會遇到問題。

156
00:09:15,180 --> 00:09:19,460
但在第二行，我們沒有三個專案，只有兩個專案。

157
00:09:19,840 --> 00:09:20,840
這就成了一個問題。

158
00:09:20,920 --> 00:09:23,820
如果我們不採取一些笨辦法，就無法解決這個問題。

159
00:09:24,040 --> 00:09:25,980
因此，我們來看另一個例子。

160
00:09:26,160 --> 00:09:29,980
我們有一個非常簡單的佈局，這是一個常見的雜誌型別佈局。

161
00:09:30,200 --> 00:09:33,880
在這裡，我們有代表這種網格型別的程式碼。

162
00:09:34,380 --> 00:09:35,960
現在，如果你用 flex.

163
00:09:35,960 --> 00:09:41,500
你需要將此柔性設定為兩個獨立的部分，然後在這裡

164
00:09:41,500 --> 00:09:45,920
這將是整個寬度，而這將是寬度的一半。

165
00:09:45,920 --> 00:09:51,400
與網格相比，這裡會產生完全相同的結果。這只是

166
00:09:51,400 --> 00:09:55,880
程式碼會更簡潔。現在，網格一開始非常嚇人，因為有

167
00:09:55,880 --> 00:09:59,260
有這麼多不同的選項，也有這麼多不同的方法來使用

168
00:09:59,260 --> 00:10:03,320
網格，但我想向你展示一個非常簡單的分步指南，告訴你如何

169
00:10:03,320 --> 00:10:07,320
但我想向你展示一個非常簡單的分步指南，告訴你如何使用網格，其實你不需要知道很多東西。因此

170
00:10:07,320 --> 00:10:11,280
瞭解網格的第一步是，我們要把它分成

171
00:10:11,280 --> 00:10:16,140
列的最小可分割單位。因此，我們來看看這個例子

172
00:10:16,140 --> 00:10:19,700
我們有一個巨大的網格，我們有不同的

173
00:10:19,700 --> 00:10:24,520
不同大小的方框，我們可以看看第一行，這樣我們就可以嘗試

174
00:10:24,520 --> 00:10:28,900
因為這些都是小方格，所以我們可以嘗試將其拆分成一個單元 兩個單元 三個單元 四個單元。

175
00:10:28,900 --> 00:10:32,580
我們可以說這個網格中有四列。

176
00:10:32,840 --> 00:10:37,140
但問題是，如果我們看一下底部的方框，它並不能

177
00:10:37,140 --> 00:10:42,240
因為它有重疊。

178
00:10:42,240 --> 00:10:45,740
如果你看一下這裡，這完成了四分之三的

179
00:10:45,740 --> 00:10:47,280
的四分之三。

180
00:10:47,320 --> 00:10:50,300
因此，它無法整齊地放入該單元。

181
00:10:50,440 --> 00:10:55,100
因此，我們可以把它分成較小數量的

182
00:10:55,100 --> 00:10:58,080
我們可以說這將是三個單位。

183
00:10:58,080 --> 00:11:04,340
所以每個盒子都是三個單位。這樣一共有 12 列。

184
00:11:04,780 --> 00:11:08,740
然後我們可以說，最下面這一列現在將是四列

185
00:11:08,740 --> 00:11:15,600
如果我們點選一下，現在就可以看到第一個方框代表三列，而下面這個方框

186
00:11:15,600 --> 00:11:17,120
代表四列。

187
00:11:17,400 --> 00:11:20,860
這樣，這個網格就可以運行了

188
00:11:20,860 --> 00:11:24,180
然後，我們還可以選中中間的一列，這將是 8 列。

189
00:11:24,180 --> 00:11:26,800
個單位。現在我們還可以

190
00:11:26,800 --> 00:11:29,480
看看行。如果我們看一下

191
00:11:29,700 --> 00:11:32,260
我們將有五個單元的行

192
00:11:32,260 --> 00:11:35,200
縱向。第一行是

193
00:11:35,200 --> 00:11:37,920
一個單元，但第二行將是

194
00:11:37,920 --> 00:11:40,420
涉及兩個單元，最後一個單元也將是

195
00:11:40,420 --> 00:11:43,440
兩個單元。也就是說，我們設定的

196
00:11:43,440 --> 00:11:46,960
為我們的網格設定了

197
00:11:46,960 --> 00:11:50,120
十二列單位，然後五

198
00:11:50,120 --> 00:11:53,180
行單位。這就是我們要

199
00:11:53,180 --> 00:11:55,780
用來設定網格，然後從那裡

200
00:11:55,780 --> 00:11:58,660
根據設計的複雜程度、

201
00:11:58,880 --> 00:12:01,620
我們將使用不同的方法來設定網格

202
00:12:01,620 --> 00:12:03,460
在三種不同的情況下

203
00:12:03,460 --> 00:12:06,120
下面我將逐一介紹每種型別。

204
00:12:06,220 --> 00:12:08,060
現在回到我們的管理儀表板、

205
00:12:08,240 --> 00:12:10,080
我認為這是一箇中等水平的

206
00:12:10,080 --> 00:12:12,380
複雜度。

207
00:12:12,660 --> 00:12:15,620
我確定這一點的方法是，大部分專案、

208
00:12:15,820 --> 00:12:19,500
方框大小有一定的一致性

209
00:12:19,500 --> 00:12:21,020
但也有一些差異。

210
00:12:21,020 --> 00:12:27,600
因此，我們要指定每個專案，併為每個專案設定各自的單元級別。

211
00:12:27,780 --> 00:12:33,320
因此，我們首先要將父級設定為 displayOfGrid，然後使用網格模板

212
00:12:33,320 --> 00:12:38,840
列。這將是你最終會用到的最常用屬性。您的

213
00:12:38,840 --> 00:12:44,840
這意味著

214
00:12:44,840 --> 00:12:47,460
我們將設定為 12 列

215
00:12:47,460 --> 00:12:49,200
就像我們之前提到的那樣。

216
00:12:49,360 --> 00:12:51,700
我們將設定每一列

217
00:12:51,700 --> 00:12:54,460
設定為一個小數單位。

218
00:12:54,720 --> 00:12:56,600
現在，你可以將其設定為畫素

219
00:12:56,960 --> 00:12:59,860
也可以根據自己的需要更改、

220
00:12:59,940 --> 00:13:01,760
但這裡的設定非常簡單。

221
00:13:01,920 --> 00:13:03,720
也就是說，我們只是將

222
00:13:03,720 --> 00:13:08,320
這一行的單位數。

223
00:13:08,600 --> 00:13:13,400
因此，12 個不同的列都是一個小數單位。

224
00:13:13,400 --> 00:13:13,580
列。

225
00:13:13,740 --> 00:13:18,320
因此，這基本上是每一列的寬度，而這是列的總數。

226
00:13:18,660 --> 00:13:21,860
對於行，我們有網格自動行。

227
00:13:22,200 --> 00:13:27,140
這意味著每一行......在本例中，我們沒有使用模板行。

228
00:13:27,380 --> 00:13:29,420
所以我們不使用單位。

229
00:13:29,540 --> 00:13:32,060
實際上，我們將其設定為 150 畫素。

230
00:13:32,380 --> 00:13:38,360
因此，這意味著這一行是 150 畫素，由於這是 2 個單位，因此這一行將是

231
00:13:38,360 --> 00:13:42,660
對於這個特定的方框來說，這裡就是 300 畫素。

232
00:13:42,660 --> 00:13:48,000
我們還設定了 20 畫素的間距，這意味著中間的間距為 20 畫素。

233
00:13:48,300 --> 00:13:50,280
接下來就很簡單了。

234
00:13:50,880 --> 00:13:55,540
現在，我們可以設定第一個方框，跨度為 3。

235
00:13:55,700 --> 00:14:01,080
我們不需要將網格行設定為跨度為 1，因為預設情況就是這樣。

236
00:14:01,440 --> 00:14:06,540
但如果我們看一下，然後向下移動到第 2 行，就可以將網格列設定為

237
00:14:06,540 --> 00:14:09,520
跨度為 8 的網格列，代表這個特殊的人。

238
00:14:09,520 --> 00:14:13,060
然後我們再將行的跨度設定為 2。

239
00:14:13,400 --> 00:14:15,360
然後，正如你所猜測的

240
00:14:15,440 --> 00:14:18,660
跨度為 4，網格行跨度為 2。

241
00:14:18,900 --> 00:14:20,640
現在你可以看到，這將是

242
00:14:20,640 --> 00:14:24,700
網格列跨度為三，網格行跨度為二。

243
00:14:24,860 --> 00:14:26,560
如你所見，這非常簡單。

244
00:14:26,660 --> 00:14:30,340
為每列設計好單元佈局後

245
00:14:30,340 --> 00:14:31,740
和行數、

246
00:14:31,980 --> 00:14:35,480
就可以輕鬆設定指定的跨度

247
00:14:35,480 --> 00:14:38,660
設定成你想要的樣子。

248
00:14:38,660 --> 00:14:42,220
只需將列數和行數除以

249
00:14:42,220 --> 00:14:45,820
和行數，但一旦你有了這些，你就有了

250
00:14:45,820 --> 00:14:50,460
就能很好地控制每個元素所佔的空間。

251
00:14:50,620 --> 00:14:54,440
現在，我們在做管理之前，已經有了非常一致的方框水平

252
00:14:54,440 --> 00:14:58,260
這樣，佈局就有了一點對稱性和一致性

253
00:14:58,260 --> 00:15:03,020
但是，這裡有一些橫跨不同垂直元素的方框

254
00:15:03,020 --> 00:15:06,760
在這種情況下，我認為這將成為一個

255
00:15:06,760 --> 00:15:08,620
網格的高階複雜性

256
00:15:08,620 --> 00:15:12,100
這就是我們要使用網格模板區域的地方。

257
00:15:12,500 --> 00:15:15,540
網格模板區域為我們提供了最大限度的全面控制

258
00:15:15,540 --> 00:15:18,020
而且還能讓我們保持

259
00:15:18,020 --> 00:15:20,400
這種型別的 CSS 程式碼。

260
00:15:20,740 --> 00:15:23,240
因此，我們要做的就是設定我們的列

261
00:15:23,240 --> 00:15:24,940
和行。

262
00:15:25,200 --> 00:15:28,560
最重要的是，我們要設定網格模板區域。

263
00:15:28,760 --> 00:15:33,620
這樣做的好處是，我們不用給每個方框設定

264
00:15:33,620 --> 00:15:40,880
或網格內的元素指定一個特定的長度和高度，而是指定一種

265
00:15:40,880 --> 00:15:46,520
小地圖或類似圖表的方式來確定網格中的位置。

266
00:15:46,740 --> 00:15:52,700
舉例來說，A、A、A，這些都是一致的，代表這邊這個特定的方框。

267
00:15:52,860 --> 00:15:55,200
所以 A 代表這個特定的元素。

268
00:15:55,480 --> 00:15:56,680
B 代表這個。

269
00:15:56,900 --> 00:15:58,720
然後 C 代表這個。

270
00:15:58,860 --> 00:16:01,540
因此，C 代表三個垂直單位。

271
00:16:01,540 --> 00:16:05,100
我們可以看到 D 在這裡，垂直方向上也是三個單位。

272
00:16:05,400 --> 00:16:06,820
E 代表兩個垂直單位。

273
00:16:07,140 --> 00:16:12,600
F 代表三個垂直單位，但這個單位會在第四行重疊。

274
00:16:12,980 --> 00:16:15,620
我們可以繼續對 g g g 做同樣的處理。

275
00:16:15,780 --> 00:16:20,500
然後 h h h 將是四個垂直單位，ii 和 jj

276
00:16:20,500 --> 00:16:22,820
這樣我們就可以控制

277
00:16:22,820 --> 00:16:24,160
這些元素。

278
00:16:24,420 --> 00:16:29,060
我們識別每個方框的方法是將其稱為網格區域。

279
00:16:29,060 --> 00:16:34,380
因此，現在我們要做的就是進入我們的特定框，然後向下指定

280
00:16:34,380 --> 00:16:37,260
這是我建立的一個非常定製的元件

281
00:16:37,260 --> 00:16:44,900
但這是網格區域 A，代表這個特定部分，然後網格區域 B 代表這個，C 代表那個，所以現在

282
00:16:44,900 --> 00:16:50,220
當我們放入元件時，我們就不必擔心元素的順序了

283
00:16:50,220 --> 00:16:53,240
我們只需將其設定為適當的網格區域即可

284
00:16:53,240 --> 00:16:58,840
如果我願意，也可以將其稱為 c，這樣我們就可以將這一特定的 c

285
00:16:58,840 --> 00:17:03,500
我們可以這樣更改，這樣就可以把它改成這樣，這樣我們就可以替換掉這些

286
00:17:03,500 --> 00:17:09,380
因此，正如你所看到的，我們可以很容易地更換這種佈局。

287
00:17:09,380 --> 00:17:16,240
然後我們繼續對 d e f 和 g h i j 做同樣的事情，這樣我們就有了我們的網格

288
00:17:16,240 --> 00:17:22,240
因此，我強烈建議您在使用柵格模板時使用柵格模板區域。

289
00:17:22,240 --> 00:17:24,700
但是，當你的佈局基本處於混亂狀態時，我強烈建議你使用網格模板區域。

290
00:17:24,960 --> 00:17:26,360
現在，這是一個例外。

291
00:17:26,620 --> 00:17:28,700
最後一種網格佈局、

292
00:17:28,820 --> 00:17:30,660
你實際上不需要設定

293
00:17:30,660 --> 00:17:33,100
列和行的最小分割單位

294
00:17:33,100 --> 00:17:34,540
在這種情況下

295
00:17:34,800 --> 00:17:36,520
就是像這樣的情況、

296
00:17:36,520 --> 00:17:38,760
就像你在這個電子商務網站中看到的那樣。

297
00:17:39,000 --> 00:17:41,480
這時，所有的專案或所有的子專案

298
00:17:41,480 --> 00:17:44,320
寬度和高度基本相同。

299
00:17:44,400 --> 00:17:46,300
因此，我們實際上不需要設定

300
00:17:46,300 --> 00:17:49,140
寬度、高度或列數

301
00:17:49,140 --> 00:17:50,160
或行數。

302
00:17:50,320 --> 00:17:51,260
我們這樣做的方法是

303
00:17:51,260 --> 00:17:53,380
我們只需將顯示設定為網格、

304
00:17:53,540 --> 00:17:56,220
並將 gridTemplateColumns 設定為重複。

305
00:17:56,400 --> 00:17:58,580
我們還可以將其設定為自動填充。

306
00:17:58,700 --> 00:18:01,720
因此，它會為我們決定列數。

307
00:18:01,860 --> 00:18:04,460
我們將每列設定為 300 畫素。

308
00:18:04,860 --> 00:18:07,020
我們可以說 justifyContent，在周圍留出空格、

309
00:18:07,180 --> 00:18:10,060
這決定了專案的佈局方式。

310
00:18:10,120 --> 00:18:11,980
因此，即使在這種情況下，所有內容都是

311
00:18:11,980 --> 00:18:14,140
完全響應

312
00:18:14,140 --> 00:18:17,360
任何媒體查詢，這非常非常好。

313
00:18:17,580 --> 00:18:19,240
另外要注意的是，在孩子們身上、

314
00:18:19,240 --> 00:18:21,760
我們完全不必指定任何內容。

315
00:18:22,000 --> 00:18:23,580
你應該這樣處理網格。

316
00:18:23,660 --> 00:18:25,840
你不應該學習所有的屬性。

317
00:18:26,160 --> 00:18:30,500
實際上，你應該按照如何使用它的指南一步一步地去做，這就是

318
00:18:30,500 --> 00:18:31,360
要簡單得多。

319
00:18:31,500 --> 00:18:37,620
幸運的是，有了 Flexbox 和 CSS 網格，如果你能正確使用這些屬性，就能

320
00:18:37,620 --> 00:18:40,900
最大限度地減少你需要編寫的媒體查詢次數。

321
00:18:41,060 --> 00:18:45,140
現在，如果你看一下這個例子，這個網站主要是用

322
00:18:45,140 --> 00:18:45,600
Flex。

323
00:18:45,600 --> 00:18:50,700
因此，如果你的螢幕較大，我們就會使用中型螢幕，而且大部分內容都是響應式的

324
00:18:50,700 --> 00:18:52,520
所以大部分都是

325
00:18:52,520 --> 00:18:58,860
適當地融入設計，我們現在不必為中等尺寸的螢幕處理大量的媒體查詢。

326
00:18:58,860 --> 00:19:02,380
對於較小的螢幕，我們仍然需要使用媒體查詢

327
00:19:02,380 --> 00:19:07,320
因此，如果我們調整到這個尺寸，你可以看到這些元素已經

328
00:19:07,320 --> 00:19:12,140
堆疊在一起，但幸運的是，如果我們使用的是 flexbox 或 grid

329
00:19:12,140 --> 00:19:18,380
就非常簡單了。例如，在這個特殊的部分，有三個

330
00:19:18,380 --> 00:19:23,800
元素是柔性的，中間有空格，我們只需在媒體查詢中刪除

331
00:19:23,800 --> 00:19:28,640
flex，它們就會自然地堆疊在一起。這是一種常見的模式，你可以

332
00:19:28,640 --> 00:19:34,380
在很多不同的情況下，我們都可以這樣做。

333
00:19:34,380 --> 00:19:40,460
當螢幕變小到足夠合理的程度時，就可以移除柔性。有時

334
00:19:40,460 --> 00:19:44,840
需要做一些實驗來確定斷點在哪裡。

335
00:19:44,840 --> 00:19:50,760
一旦你把佈局都設定好了，響應式設計就變得非常容易了。

336
00:19:50,760 --> 00:19:55,760
正確設定。在我們討論了柔性和網格之後，有時這些

337
00:19:55,760 --> 00:20:00,620
並不是最好的選擇。那麼我們可以使用絕對和相對

338
00:20:00,620 --> 00:20:04,920
定位作為輔助選擇。絕對定位非常強大，因為你可以

339
00:20:04,920 --> 00:20:09,740
絕對定位非常強大，因為你可以將其放置在螢幕上的任何位置，而且其操作方法不言自明

340
00:20:09,740 --> 00:20:15,600
當然，正如我提到的，絕對定位應該是次要選擇。很多時候

341
00:20:15,600 --> 00:20:19,920
絕對定位與相對定位結合使用。因此，絕對和相對

342
00:20:19,920 --> 00:20:24,240
定位並不常用。

343
00:20:24,240 --> 00:20:28,980
企業級應用程式（無論是電子商務還是管理儀表板）時，絕對定位和相對定位並不常用。A

344
00:20:28,980 --> 00:20:33,180
很多時候，這些應用程式都是結構性很強的，而且具有很強的對稱性。當你

345
00:20:33,180 --> 00:20:37,620
設計網站（如設計公司或著陸頁

346
00:20:37,620 --> 00:20:41,020
但又非常花哨，比如你會在這個特定網站上看到的頁面

347
00:20:41,020 --> 00:20:47,420
www.awards.com 這些網站都非常注重設計。例如這個頁面

348
00:20:47,420 --> 00:20:52,360
像這個特定的網站一樣，您將元素定位在

349
00:20:52,360 --> 00:20:57,900
非常規的位置，這時您就需要使用絕對和

350
00:20:57,900 --> 00:21:02,340
相對定位，因為當您的專案具有

351
00:21:02,340 --> 00:21:06,860
因為當你的專案一般都是對角線型別的，或者它們分散在不同的位置時，就很難實現彈性定位。

352
00:21:06,860 --> 00:21:09,000
整個網站。

353
00:21:09,260 --> 00:21:12,200
現在，除了使用絕對定位和相對定位

354
00:21:12,200 --> 00:21:14,860
用於在非常棘手的情況下放置專案

355
00:21:14,860 --> 00:21:16,680
就像我們在設計師網站上看到的那樣、

356
00:21:16,980 --> 00:21:18,600
還有一種非常常見的情況

357
00:21:18,600 --> 00:21:21,460
使用相對位置和絕對位置

358
00:21:21,460 --> 00:21:24,600
將專案放在另一個專案的頂部。

359
00:21:24,720 --> 00:21:27,180
所以，如果你看看這張卡片，沒錯、

360
00:21:27,520 --> 00:21:29,520
我們有兩個按鈕

361
00:21:29,520 --> 00:21:32,280
放在這個框的頂部。

362
00:21:32,600 --> 00:21:35,520
我們的方法是將整個框

363
00:21:35,520 --> 00:21:42,140
設定為相對位置。我們還將圖片設定為整個方框的子方框，但我們

364
00:21:42,140 --> 00:21:50,140
另一個方框的位置是絕對的，它的位置是底部的 10

365
00:21:50,140 --> 00:21:56,460
左為 0，這樣我們就有了這個特殊的框元素。透過

366
00:21:56,460 --> 00:22:02,060
這樣，我們就有了一種非常常見的模式，即我們可以將父元素設定為相對位置，而將

367
00:22:02,060 --> 00:22:06,500
子元素的絕對位置。

368
00:22:07,340 --> 00:22:12,280
這是另一種情況。在這個旋轉木馬中，我們可以將這個專案

369
00:22:12,280 --> 00:22:17,940
在整個旋轉木馬上使用位置相對的父項，然後將子項設定為

370
00:22:17,940 --> 00:22:22,260
子項。另一個例子可以在這裡看到，在這個元素中

371
00:22:22,260 --> 00:22:28,020
這裡的圖片和它後面的輪廓邊框。還有

372
00:22:28,020 --> 00:22:31,420
最後，在另一個例子中，我用

373
00:22:31,420 --> 00:22:34,740
背景中的文字，我們需要

374
00:22:34,740 --> 00:22:38,080
文字要跟上這裡的原文。

375
00:22:38,420 --> 00:22:44,160
這樣，一旦我們移動它，這個大文字就會跟隨 EvoGym。

376
00:22:44,480 --> 00:22:49,180
因此，我們要將父元素再次設定為

377
00:22:49,180 --> 00:22:56,420
相對元素，而子元素則再次使用之前呼叫的選擇器、

378
00:22:56,420 --> 00:23:01,900
並將其設定為絕對元素，然後我們將這個子元素定位到它的頂部。

379
00:23:01,900 --> 00:23:07,140
上面一點。然後將其向左定位一點，這樣我們就可以從這裡開始，而不是

380
00:23:07,140 --> 00:23:11,980
而不是在這個軸上。正如你所看到的，絕對定位和相對定位都是

381
00:23:11,980 --> 00:23:16,420
一般作為輔助選項使用，尤其是對於功能性和

382
00:23:16,420 --> 00:23:22,060
應用型別的網站。當涉及到設計師之類的網站時，你會

383
00:23:22,060 --> 00:23:23,480
使用頻率更高。

384
00:23:23,780 --> 00:23:26,000
但很多時候，您在開發

385
00:23:26,000 --> 00:23:28,120
更多的是功能性應用程式、

386
00:23:28,120 --> 00:23:30,960
在這種情況下，您會使用相對

387
00:23:30,960 --> 00:23:33,760
和絕對定位相結合

388
00:23:33,760 --> 00:23:36,500
而不使用 USUP。

389
00:23:36,660 --> 00:23:37,240
就是這樣。

390
00:23:37,340 --> 00:23:39,800
這就是最全面的 CSS 佈局影片

391
00:23:39,800 --> 00:23:41,900
我想按照

392
00:23:41,900 --> 00:23:44,500
一步一步的過程，這樣你就有了一個基礎

393
00:23:44,500 --> 00:23:47,300
或 CSS 佈局結構

394
00:23:47,300 --> 00:23:49,140
因為很多人都不教

395
00:23:49,140 --> 00:23:56,240
這種基本的 CSS 方法。相反，他們只是去發現一些小問題，比如

396
00:23:56,240 --> 00:24:01,780
而不是建立基礎。無論如何，請點贊、評論、訂閱。

397
00:24:02,300 --> 00:24:03,060
下次見。

