1
00:00:05,690 --> 00:00:08,091
每天早上醒來

2
00:00:08,191 --> 00:00:10,823
最讓我興奮的事情莫過於連續更改 20 次相同的畫素值

3
00:00:11,645 --> 00:00:16,052
讓我覺得自己在為人類做了一件非常有價值的事。

4
00:00:16,312 --> 00:00:20,262
既然你們是 css 專家，根據我的社群帖子

5
00:00:20,583 --> 00:00:24,831
我想滿足你們成為 CSS 搖滾明星的畢生抱負。

6
00:00:25,031 --> 00:00:29,677
在這本 CSS 佈局指南中，我並不是要解釋 CSS 的所有屬性和值。

7
00:00:30,037 --> 00:00:32,691
因為有大量資源可以告訴你如何做到這一點。

8
00:00:32,972 --> 00:00:35,360
不過，我想說的是，你應該如何處理和思考 CSS 佈局

9
00:00:35,360 --> 00:00:41,420
這樣你的 css 就不會像我們工程師的社交能力一樣混亂。

10
00:00:40,620 --> 00:00:43,908
這適用於任何 CSS 庫、後處理器或元件。

11
00:00:44,389 --> 00:00:47,338
或者你能想到的任何東西，因為它更多的是關於方法。

12
00:00:47,659 --> 00:00:50,975
現在有一些罕見的文章可以解釋我所說的內容。

13
00:00:51,135 --> 00:00:55,995
但我想在影片中進一步介紹如何處理每一個小步驟。

14
00:00:56,476 --> 00:01:00,062
所以，當你得到一個需要用 CSS 來實現的設計時、

15
00:01:00,543 --> 00:01:04,719
你應該做的第一件事，就是用方框的形式將一切視覺化。

16
00:01:05,160 --> 00:01:07,870
首先，我們要談談 CSS 框模型。

17
00:01:07,990 --> 00:01:12,011
CSS 框模型代表了所有的層，即一個單獨的框。

18
00:01:12,594 --> 00:01:14,880
因此，我們包括內容、padding、邊框。

19
00:01:15,221 --> 00:01:19,940
預設情況下，CSS 將所有內容都設定為內容框。

20
00:01:20,222 --> 00:01:21,308
只包含內容。

21
00:01:21,348 --> 00:01:23,380
因此，這就代表了一個元素。

22
00:01:23,621 --> 00:01:27,028
但如果設定為 border box，就會包含 padding 和 border。

23
00:01:27,188 --> 00:01:31,503
瞭解了盒子模型之後，我們就可以將佈局分割成不同的區塊了。

24
00:01:31,925 --> 00:01:36,215
我們希望能將頁面上的每個元素都視覺化為一個塊。

25
00:01:36,556 --> 00:01:39,974
正如你在這裡看到的，我們從外部開始，然後進入內部。

26
00:01:40,356 --> 00:01:43,528
我們總是從頂部開始橫向佈局。

27
00:01:43,789 --> 00:01:48,424
我們不會縱向排列，因為 div 會自然地疊加在一起。

28
00:01:48,584 --> 00:01:52,704
因此，我們要確保從水平方向開始分割元素。

29
00:01:53,187 --> 00:01:54,151
分成不同的塊。

30
00:01:54,513 --> 00:01:56,844
現在，以 YouTube 登陸頁面為例。

31
00:01:57,125 --> 00:02:01,473
我們可以切換 Chrome 瀏覽器擴充套件，這樣就可以將頁面上的所有元素

32
00:02:01,633 --> 00:02:03,256
以不同的方框顯示。

33
00:02:03,376 --> 00:02:05,800
因此，如果將滑鼠懸停在這裡，我們會看到導航欄。

34
00:02:06,261 --> 00:02:08,186
這裡還有一個方框，這裡和這裡也是。

35
00:02:09,590 --> 00:02:14,168
每個影片本身也是一個方框。

36
00:02:14,449 --> 00:02:18,863
現在你可以想象，如果你使用的是框架，視覺化這些方框也會有所幫助。

37
00:02:19,425 --> 00:02:22,801
如果你使用的是 React Vue 這樣的框架，視覺化這些方框也會有所幫助。

38
00:02:23,465 --> 00:02:26,705
Angular 或 Svelte 等框架所需的元件，因此這些元件非常適合

39
00:02:27,007 --> 00:02:28,374
因此這些元件非常適合這些盒子。

40
00:02:28,756 --> 00:02:30,767
正如我們在一些佈局中看到的那樣、

41
00:02:31,290 --> 00:02:33,988
需要了解的最重要的一點是，一切...

42
00:02:34,471 --> 00:02:36,540
都有父子關係。

43
00:02:37,143 --> 00:02:39,541
所以這裡的每個元素都有父

44
00:02:40,246 --> 00:02:40,829
和子元素。

45
00:02:43,243 --> 00:02:47,341
這對我們理解如何使用 Flexbox 和 Grid

46
00:02:47,783 --> 00:02:49,031
佈局的關鍵。

47
00:02:49,453 --> 00:02:50,339
現在視覺化

48
00:02:50,641 --> 00:02:52,896
或透過塊進行佈局真的很有幫助。

49
00:02:53,237 --> 00:02:57,505
它為我們的整個 CSS 程式碼奠定了基礎和結構。

50
00:02:57,866 --> 00:03:02,685
這有助於我們利用一個非常重要的工具，我們稱之為 Flexbox。

51
00:03:03,065 --> 00:03:06,430
現在，網站上有多種定位工具。

52
00:03:06,570 --> 00:03:10,407
但你最應該使用的工具是 Flexbox。

53
00:03:10,849 --> 00:03:13,467
還有一個叫 float 的工具，可以用來

54
00:03:13,527 --> 00:03:18,447
但它是過時的定位方式，只有在你需要的時候才可以使用。

55
00:03:19,549 --> 00:03:22,374
說到 Flexbox 與絕對定位，很多人

56
00:03:22,634 --> 00:03:27,534
我認為這是一個基本錯誤。

57
00:03:27,895 --> 00:03:29,159
原因有以下幾點。

58
00:03:29,320 --> 00:03:31,426
首先，它更難實現響應式設計。

59
00:03:31,687 --> 00:03:33,882
舉例來說，如果你將某項內容設定為 150 畫素。

60
00:03:35,149 --> 00:03:37,477
從螢幕右側看，它會

61
00:03:37,537 --> 00:03:41,274
在 3000 畫素的螢幕上的位置就會大不相同。

62
00:03:42,600 --> 00:03:46,014
與 300 畫素的移動螢幕相比，右側 150 畫素的位置將

63
00:03:47,500 --> 00:03:48,433
將位於中央。

64
00:03:48,772 --> 00:03:53,195
除此之外，這還會導致你在設計時採用特定的畫素。

65
00:03:53,396 --> 00:03:55,934
完美的方式進行設計，這並不理想。

66
00:03:56,195 --> 00:04:01,049
現在還有一個更大的原因，那就是你應該始終使用柔性框與絕對定位，這是因為

67
00:04:01,391 --> 00:04:04,989
柔性框不會干擾佈局的流程。

68
00:04:05,290 --> 00:04:09,987
這意味著，如果你看看這個佈局，再看看這個導航欄，你就會發現，Flexbox 並不會影響佈局的流暢性、

69
00:04:10,229 --> 00:04:12,301
每個專案都是相互關聯的。

70
00:04:12,442 --> 00:04:13,730
例如，這個專案

71
00:04:14,071 --> 00:04:18,759
與此相關，因為它們位於同一行，而且位置靠右。

72
00:04:19,080 --> 00:04:22,094
但是，如果你看一下這個，這個夜間時間......

73
00:04:22,576 --> 00:04:27,097
圖示，並將其移除，那麼這些其他專案就都不存在了

74
00:04:27,378 --> 00:04:32,258
有時您不希望在這兩個專案之間留出這麼大的空間。

75
00:04:32,539 --> 00:04:34,646
實際上，我們還可以把這個輪廓去掉。

76
00:04:34,807 --> 00:04:38,775
現在，這些專案和這個專案之間有了很大的空隙。

77
00:04:39,036 --> 00:04:42,039
這就需要我們定位這個，把它移到這裡。

78
00:04:42,119 --> 00:04:43,704
這就很麻煩了。

79
00:04:43,764 --> 00:04:45,771
相比之下，我們來看看 Flexbox。

80
00:04:46,091 --> 00:04:50,357
我們又有了這些專案，讓我們看看去掉這些設定後會發生什麼。

81
00:04:51,079 --> 00:04:54,296
我們可以看到，這個和這個一起被移到了這裡。

82
00:04:54,637 --> 00:04:56,343
然後，讓我們實際移除配置檔案圖示。

83
00:04:57,005 --> 00:04:59,934
正如你所看到的，它被移到了這裡，與這裡對齊。

84
00:05:00,194 --> 00:05:04,133
因此，我們很容易就能按照自己的喜好進行設定。

85
00:05:05,218 --> 00:05:08,430
因為我們是按照佈局的流程來設定的。

86
00:05:08,611 --> 00:05:09,856
它們之間是有關係的。

87
00:05:10,358 --> 00:05:13,491
每個專案的其他位置在哪裡。

88
00:05:13,792 --> 00:05:14,936
因此，即使在搜尋欄中也是如此、

89
00:05:15,458 --> 00:05:19,693
這個位置在右邊，搜尋在左邊。

90
00:05:20,034 --> 00:05:24,260
因此，在頁面上有很多專案時，總會有這樣的動態流程。

91
00:05:24,500 --> 00:05:27,426
因此，使用 Flexbox

92
00:05:27,887 --> 00:05:29,534
更容易維護。

93
00:05:29,634 --> 00:05:30,959
如果你曾經試圖

94
00:05:31,340 --> 00:05:34,565
如果你曾經試圖修復一個程式碼庫，其中的所有內容都是絕對定位的。

95
00:05:34,987 --> 00:05:38,087
你就會意識到這將成為維護工作的噩夢。

96
00:05:38,490 --> 00:05:41,087
因為你必須不斷地計算畫素。

97
00:05:41,610 --> 00:05:43,393
因為你必須不斷地計算畫素。

98
00:05:43,614 --> 00:05:45,717
Flexbox 是理想的工具

99
00:05:46,078 --> 00:05:48,849
當涉及到大多數應用程式和大多數網站時。

100
00:05:49,150 --> 00:05:52,061
現在，Flexbox 有很多特性。

101
00:05:52,543 --> 00:05:55,429
但實際上，真正需要了解的屬性只有幾個。

102
00:05:55,669 --> 00:05:58,037
理解這一點非常重要。

103
00:05:58,177 --> 00:06:00,751
我之前提到的父子關係。

104
00:06:01,314 --> 00:06:04,819
因為你要在父元素上使用不同的屬性。

105
00:06:05,279 --> 00:06:07,363
因為你要在 Flexbox 中的所有子元素上使用不同的屬性。

106
00:06:07,924 --> 00:06:11,858
因此，父元素屬性將擁有你在這裡看到的所有屬性。

107
00:06:12,119 --> 00:06:15,640
但我們關心的只是

108
00:06:16,283 --> 00:06:18,928
display、justify content 和 align。

109
00:06:19,429 --> 00:06:23,157
這三個屬性是你真正需要知道的屬性

110
00:06:23,719 --> 00:06:26,394
即使是對齊內容和對齊專案。

111
00:06:26,977 --> 00:06:28,945
每個屬性都只有幾個。

112
00:06:30,009 --> 00:06:33,337
有了小抄，你在使用 Xbox 時就會得心應手。

113
00:06:34,279 --> 00:06:37,766
利用它，你可以看到並直觀地瞭解這些屬性的作用。

114
00:06:38,989 --> 00:06:43,445
JustifyContent 將是最常用的 Flexbox 父屬性，您將

115
00:06:43,726 --> 00:06:44,309
需要使用的屬性。

116
00:06:44,912 --> 00:06:48,348
正當化內容將專案或子專案

117
00:06:48,830 --> 00:06:52,620
以水平方向或預設方向對齊。

118
00:06:52,921 --> 00:06:57,062
因此，我們有 Flex start、Flex end、center、space between 和
space around。

119
00:06:57,686 --> 00:07:00,500
最常用的是中間空格、四周空格和居中。

120
00:07:00,621 --> 00:07:03,619
間距、左右間距、居中是最常用的，偶爾也會用到彈性開始、彈性結束。

121
00:07:03,941 --> 00:07:06,838
第二種最常用的對齊方式

122
00:07:07,360 --> 00:07:09,126
對齊內容

123
00:07:09,628 --> 00:07:14,267
與 justify-content 差不多，但它是垂直對齊。

124
00:07:14,508 --> 00:07:18,674
因此，我們有了 flex-start、flex-end、center、space-between 和 space around。

125
00:07:19,235 --> 00:07:23,108
最常用的是居中，因為

126
00:07:23,168 --> 00:07:26,762
因為很多時候我們只需對齊一條水平線。

127
00:07:27,003 --> 00:07:31,250
因此，即使是在一個基本的例子中，你也可以看到這裡是柔性的。

128
00:07:31,630 --> 00:07:35,676
然後我們在這個特殊的 div 之間使用空格，將所有內容間隔開來。

129
00:07:36,056 --> 00:07:38,522
這裡也是一樣，這是另一個父代。

130
00:07:38,883 --> 00:07:41,848
然後這些是帶有導航項的子代。

131
00:07:42,269 --> 00:07:43,854
這些都是空格。

132
00:07:44,295 --> 00:07:44,616
注意

133
00:07:44,636 --> 00:07:47,220
在這裡，我們還對它們進行了垂直對齊。

134
00:07:47,260 --> 00:07:49,123
因此，我們使用的是行內容居中。

135
00:07:49,564 --> 00:07:53,740
這就是使用 Flex 設定佈局的最常見方法之一。

136
00:07:54,282 --> 00:07:58,164
佈局的最常用方法之一。

137
00:07:58,325 --> 00:08:02,447
但我要向您展示的是，您無需使用 flex-wrap 的方法。

138
00:08:02,668 --> 00:08:05,078
現在來看看 Flexbox 的子屬性、

139
00:08:05,580 --> 00:08:09,415
只有少數幾個屬性是你必須知道的，而且只是偶爾會用到。

140
00:08:09,737 --> 00:08:13,738
例如，如果將其設定為零，flex-grow 將佔用

141
00:08:14,099 --> 00:08:17,416
空間，但如果你點選 "1"。

142
00:08:17,898 --> 00:08:20,445
如果有多餘的空間，它會盡可能多地增長。

143
00:08:21,048 --> 00:08:22,033
在這個元素中。

144
00:08:22,355 --> 00:08:24,025
我們還有彈性底座，所以

145
00:08:24,306 --> 00:08:27,356
flex-basis 對寬度的處理非常複雜

146
00:08:27,577 --> 00:08:29,544
但它與寬度基本上是一樣的。

147
00:08:30,046 --> 00:08:33,399
只是多了一些屬性，而且與 Flexbox 的互動更好。

148
00:08:33,519 --> 00:08:37,200
我有在描述放了一個連結，如果你想深入瞭解 flex-basis

149
00:08:37,682 --> 00:08:42,332
但在使用 Flexbox 時，你應該使用 flex-basis，而不是
width。

150
00:08:42,614 --> 00:08:44,953
因此，Flex 非常適合像這樣有

151
00:08:45,415 --> 00:08:48,647
一個維度，即水平或垂直。

152
00:08:49,249 --> 00:08:51,421
但如果有一個部分有點像這樣

153
00:08:52,185 --> 00:08:55,185
既有水平元素又有垂直元素。

154
00:08:55,788 --> 00:08:57,653
那麼網格就是更好的選擇。

155
00:08:57,952 --> 00:09:02,852
即使在這種情況下，我們只是以類似相簿的格式顯示專案列表。

156
00:09:02,932 --> 00:09:07,722
但網格仍然非常容易實現，我們只需三行

157
00:09:07,802 --> 00:09:08,023
程式碼就能實現。

158
00:09:08,243 --> 00:09:12,433
但是，如果我們嘗試使用 flex，在這種情況下使用 flex 實際上會有一個問題。

159
00:09:12,774 --> 00:09:16,661
第一行沒有問題，但第二行就有問題了。

160
00:09:17,384 --> 00:09:19,459
不是三個專案，而是兩個專案。

161
00:09:19,841 --> 00:09:20,825
這就成了一個問題。

162
00:09:20,925 --> 00:09:23,875
如果不採取一些笨辦法，我們就無法解決這個問題。

163
00:09:24,136 --> 00:09:26,042
因此，我們來看另一個例子。

164
00:09:26,664 --> 00:09:27,607
非常簡單的佈局。

165
00:09:27,708 --> 00:09:29,975
這是一種常見的雜誌式佈局。

166
00:09:30,337 --> 00:09:33,892
在這裡，我們有代表這種網格型別的程式碼。

167
00:09:34,435 --> 00:09:38,471
現在，如果你看一下柔性，你將不得不把這個柔性設定為兩個。

168
00:09:39,273 --> 00:09:42,139
分開，然後這裡是

169
00:09:42,682 --> 00:09:45,001
是整個寬度，而這裡是寬度的一半。

170
00:09:45,222 --> 00:09:47,167
與網格比較一下。

171
00:09:47,688 --> 00:09:50,417
這將產生完全相同的結果。

172
00:09:50,980 --> 00:09:53,400
只是程式碼變得更簡潔了。

173
00:09:53,641 --> 00:09:57,773
一開始，網格是非常可怕的，因為有太多不同的選項，有太多不同的

174
00:09:57,934 --> 00:10:00,282
方法，但我想

175
00:10:00,302 --> 00:10:04,751
但我想向你展示一個非常簡單的分步指南，告訴你如何使用網格。

176
00:10:05,172 --> 00:10:06,884
你必須知道的東西其實並不多。

177
00:10:07,106 --> 00:10:07,750
所以第一步

178
00:10:08,253 --> 00:10:11,830
我們要把網格分割成最小的

179
00:10:12,031 --> 00:10:13,864
列。

180
00:10:14,125 --> 00:10:14,850
因此，如果我們看一看

181
00:10:15,071 --> 00:10:18,597
在這個例子中，我們有一個巨大的網格。

182
00:10:18,958 --> 00:10:23,452
我們可以看看第一行。

183
00:10:23,733 --> 00:10:26,267
我們可以嘗試將其分為 1 個單元、2 個單元、3 個單元。

184
00:10:27,634 --> 00:10:32,534
4個單位，因為這些都是小方框，我們可以說這個網格中有四列。

185
00:10:33,137 --> 00:10:35,970
但問題是，如果我們看一下最下面的這個方框。

186
00:10:36,371 --> 00:10:38,861
它並不能整齊地放入這些

187
00:10:39,744 --> 00:10:43,496
因為如果你看一下這裡的話，它會重疊在一起。

188
00:10:43,837 --> 00:10:47,307
這個方框的四分之三。

189
00:10:47,327 --> 00:10:47,849
所以它不能

190
00:10:48,350 --> 00:10:50,420
整齊地放入那個單元。

191
00:10:50,440 --> 00:10:51,544
所以我們可以...

192
00:10:52,027 --> 00:10:56,625
就是把它分成更小的單位，我們可以說這將是

193
00:10:57,609 --> 00:10:59,760
3個單位，所以每個盒子就是3個單位。

194
00:11:00,603 --> 00:11:04,417
這樣一共有 12 列。

195
00:11:04,818 --> 00:11:08,644
然後我們可以說，最下面這一列現在將是四列。

196
00:11:09,287 --> 00:11:11,363
點選這裡，我們可以看到

197
00:11:11,947 --> 00:11:14,414
第一個方框代表三列。

198
00:11:14,615 --> 00:11:17,168
而底部這個方框代表四列。

199
00:11:17,589 --> 00:11:21,962
這樣，這個網格就能正常工作了，然後我們還可以選中

200
00:11:22,102 --> 00:11:25,642
然後我們還可以選中中間的方框，這樣就可以橫跨 8 個單位了。

201
00:11:26,064 --> 00:11:28,391
現在我們還可以看看行。

202
00:11:28,572 --> 00:11:30,297
如果我們看一下，我們將有

203
00:11:30,659 --> 00:11:32,993
5 個單位的垂直行。

204
00:11:33,215 --> 00:11:35,917
所以第一行只有一個單位。

205
00:11:36,038 --> 00:11:40,981
第二行是兩個單元，最後一行也是兩個單元。

206
00:11:41,362 --> 00:11:44,008
也就是說，我們所設定的

207
00:11:44,429 --> 00:11:48,504
我們的網格現在有 12 列單位。

208
00:11:49,126 --> 00:11:51,377
然後是五行單位。

209
00:11:51,738 --> 00:11:53,647
這就是我們要用來

210
00:11:53,928 --> 00:11:54,892
來設定我們的網格。

211
00:11:56,457 --> 00:11:58,624
設計的複雜程度

212
00:11:58,905 --> 00:12:01,596
我們將使用不同的方法來設定網格。

213
00:12:01,997 --> 00:12:06,089
我們將在三種不同的場景中使用不同的網格方法，下面我將逐一介紹。

214
00:12:06,249 --> 00:12:08,537
現在回到我們的管理儀表板，我會

215
00:12:08,697 --> 00:12:12,376
當我們使用 GRID 時，將其視為中等複雜程度。

216
00:12:12,797 --> 00:12:17,083
我確定這一點的方法是，大多數專案在方框尺寸上都有一定的一致性。

217
00:12:17,383 --> 00:12:19,290
但也有一些差異。

218
00:12:19,872 --> 00:12:21,140
但也有一些差異。

219
00:12:21,220 --> 00:12:22,467
因此，我們要...

220
00:12:23,110 --> 00:12:27,499
指定每個專案，並賦予每個專案各自的單位級別。

221
00:12:27,900 --> 00:12:31,452
因此，我們首先要將父項設定為顯示網格。

222
00:12:31,774 --> 00:12:33,902
然後我們可以使用網格模板列。

223
00:12:33,942 --> 00:12:36,613
這將是最常用的屬性

224
00:12:36,754 --> 00:12:38,240
最常用的屬性。

225
00:12:38,501 --> 00:12:40,630
你需要熟悉

226
00:12:40,931 --> 00:12:43,255
裡面的 repeat 函式。

227
00:12:43,495 --> 00:12:44,397
這意味著

228
00:12:44,597 --> 00:12:49,208
就是我們要設定成 12 列，就像我們之前提到的那樣。

229
00:12:49,629 --> 00:12:51,763
我們要將每一列

230
00:12:52,105 --> 00:12:54,517
設定為一個小數單位。

231
00:12:54,879 --> 00:12:59,718
現在，你可以將其設定為畫素，也可以根據自己的需要進行更改。

232
00:13:00,220 --> 00:13:03,750
但這裡的設定非常簡單，也就是說，我們只需將

233
00:13:04,051 --> 00:13:08,252
基於這一行的單位數。

234
00:13:08,654 --> 00:13:13,413
因此，12 個不同的列都是一個小數單位。

235
00:13:13,774 --> 00:13:18,312
這就是每一列的寬度和列的總數。

236
00:13:18,654 --> 00:13:21,875
對於行，我們有網格自動行。

237
00:13:22,196 --> 00:13:25,844
也就是說，在這種情況下，我們不會使用每一行。

238
00:13:26,004 --> 00:13:28,735
模板行，所以我們不使用

239
00:13:29,177 --> 00:13:31,080
單位，我們實際上將其設定為 150 畫素。

240
00:13:32,603 --> 00:13:34,509
因此，這意味著這一行是 150 畫素。

241
00:13:35,773 --> 00:13:39,509
由於這是兩個單位，因此這一行的畫素將是 300

242
00:13:39,951 --> 00:13:42,543
300 畫素。

243
00:13:43,005 --> 00:13:44,872
我們還設定了 20 畫素的間距。

244
00:13:44,912 --> 00:13:47,824
這意味著中間的間距為 20 畫素。

245
00:13:48,005 --> 00:13:50,297
從這裡開始，就非常簡單了。

246
00:13:50,961 --> 00:13:53,380
現在我們可以設定第一個方框

247
00:13:53,601 --> 00:13:55,615
它的跨度為 3。

248
00:13:55,897 --> 00:13:56,824
我們不需要將

249
00:13:57,065 --> 00:14:01,093
網格行的跨度為一，因為預設情況就是這樣。

250
00:14:01,494 --> 00:14:04,582
但如果我們看一下，然後向下移動到第二行。

251
00:14:05,184 --> 00:14:09,503
現在我們有了一個跨度為 8 的網格列，它代表了這個特殊的人。

252
00:14:10,005 --> 00:14:12,996
然後我們再將行的跨度設定為 2。

253
00:14:13,418 --> 00:14:16,867
然後，正如你所猜測的那樣，這一行的跨度為 4。

254
00:14:17,228 --> 00:14:18,693
網格行跨度為 2。

255
00:14:18,934 --> 00:14:19,616
現在你可以看到

256
00:14:19,797 --> 00:14:24,596
網格列跨度為 3，行跨度為 2。

257
00:14:24,936 --> 00:14:28,782
正如你所看到的，一旦有了單元佈局，這就非常簡單了。

258
00:14:29,142 --> 00:14:31,366
每列和每行的行數。

259
00:14:32,327 --> 00:14:36,926
你可以很容易地將指定的跨度設定為你想要的跨度。

260
00:14:37,648 --> 00:14:39,735
你可以很容易地將指定的跨度設定成你想要的樣子。

261
00:14:39,815 --> 00:14:42,225
只需將列數

262
00:14:42,747 --> 00:14:47,225
但一旦你有了這些，你就能很好地控制

263
00:14:47,727 --> 00:14:50,443
每個元素將佔用多少空間。

264
00:14:50,603 --> 00:14:53,996
現在，我們在做管理之前，有一個非常一致的

265
00:14:54,096 --> 00:14:56,424
方框，所以有一點對稱和

266
00:14:56,685 --> 00:14:58,372
一致性。

267
00:14:58,452 --> 00:14:59,617
但這裡的這個...

268
00:14:59,938 --> 00:15:03,143
我們有橫跨不同垂直元素的方框。

269
00:15:03,223 --> 00:15:04,345
我認為

270
00:15:04,685 --> 00:15:08,620
這將成為網格的高階複雜性。

271
00:15:08,760 --> 00:15:12,108
這就是我們要使用網格模板區域的地方。

272
00:15:12,490 --> 00:15:15,989
網格模板區域為我們提供了最大程度的全面控制和一個

273
00:15:16,049 --> 00:15:20,460
它還能讓我們輕鬆維護這類 CSS 程式碼。

274
00:15:20,760 --> 00:15:24,957
因此，我們要做的就是像往常一樣設定列和行。

275
00:15:25,218 --> 00:15:28,516
最重要的是，我們要設定網格模板區域。

276
00:15:28,857 --> 00:15:31,805
這樣做的方式是

277
00:15:32,146 --> 00:15:35,464
而不是給網格內的每個框或元素

278
00:15:35,886 --> 00:15:38,117
指定長度和高度。

279
00:15:38,439 --> 00:15:39,424
而是

280
00:15:39,705 --> 00:15:41,852
而是指定一種類似小地圖

281
00:15:42,113 --> 00:15:46,521
或類似圖表的方式來確定網格中的位置。

282
00:15:46,721 --> 00:15:51,012
例如，AAA，這些是一致的，表示

283
00:15:51,112 --> 00:15:52,695
這個特定的方框。

284
00:15:52,836 --> 00:15:55,281
所以 A 代表這個特定的元素。

285
00:15:55,481 --> 00:15:58,736
B 代表這個，然後 C 代表這個。

286
00:15:58,857 --> 00:16:00,103
所以 C 是三個

287
00:16:00,625 --> 00:16:04,095
垂直單位，我們可以在這裡看到這些，這將是

288
00:16:04,195 --> 00:16:08,974
垂直方向上是三個單位，E 垂直方向上是兩個單位，F 垂直方向上是三個單位。

289
00:16:09,316 --> 00:16:12,614
但這個會在第四行重疊。

290
00:16:13,055 --> 00:16:17,245
我們可以用 g g g 繼續做同樣的操作，然後 h h h 將是

291
00:16:17,466 --> 00:16:19,980
與 ii 和 jj 在垂直方向上是四個單元。

292
00:16:20,784 --> 00:16:24,239
這樣，我們就可以控制這些元素了。

293
00:16:24,440 --> 00:16:26,648
我們識別每個方框的方法是

294
00:16:26,909 --> 00:16:29,158
我們將其稱為網格區域。

295
00:16:29,218 --> 00:16:31,608
現在我們要做的就是進入我們的

296
00:16:32,230 --> 00:16:35,081
框，然後指定這是一個

297
00:16:35,644 --> 00:16:38,858
我建立的自定義元件，但這是網格區域 A。

298
00:16:39,079 --> 00:16:44,019
網格區域 B 代表這個區域，網格區域 C 代表這個區域，網格區域 D 代表這個區域，網格區域 E
代表這個區域。

299
00:16:44,179 --> 00:16:44,439
那個。

300
00:16:44,640 --> 00:16:48,404
因此，現在我們在玩

301
00:16:48,544 --> 00:16:51,599
放置元件時，我們只需將其設定為適當的網格區域。

302
00:16:51,940 --> 00:16:53,323
作為適當的網格區域。

303
00:16:53,363 --> 00:16:55,787
如果我願意，也可以把它叫做 C。

304
00:16:56,067 --> 00:16:59,920
我們可以這樣更改。

305
00:17:00,181 --> 00:17:03,481
這樣我們就可以替換掉這些

306
00:17:03,702 --> 00:17:04,023
專案。

307
00:17:04,204 --> 00:17:08,541
因此，正如你所看到的，這種型別的佈局可以很容易地互換。

308
00:17:08,861 --> 00:17:13,467
然後，我們將繼續對 D、E、F 以及 G、H 和 D 進行同樣的操作。

309
00:17:14,491 --> 00:17:18,507
這樣，整個螢幕就有了網格模板區域。

310
00:17:18,788 --> 00:17:23,366
因此，我強烈推薦大家使用網格模板區域。

311
00:17:23,507 --> 00:17:24,751
佈局混亂時，我強烈推薦使用網格模板區域。

312
00:17:24,951 --> 00:17:27,558
現在這是一個例外，最後一種型別的

313
00:17:27,900 --> 00:17:30,478
網格佈局，你實際上不需要設定

314
00:17:30,678 --> 00:17:34,647
這種情況下的列和行的最小可分割單位

315
00:17:34,867 --> 00:17:38,847
就像你在這個電子商務網站中看到的那樣。

316
00:17:39,028 --> 00:17:41,642
這時所有的專案或所有的子項。

317
00:17:41,983 --> 00:17:44,332
基本上是同寬同高。

318
00:17:44,413 --> 00:17:46,240
因此，我們實際上不需要設定

319
00:17:46,440 --> 00:17:50,090
寬度、高度、列數或行數。

320
00:17:50,230 --> 00:17:52,928
我們這樣做的方法是，只需將顯示設定為

321
00:17:53,089 --> 00:17:56,124
網格，並將網格模板列設定為重複。

322
00:17:56,526 --> 00:17:58,631
我們還可以將其設定為自動填充。

323
00:17:58,792 --> 00:18:00,677
因此，它決定了列數

324
00:18:01,179 --> 00:18:03,389
我們將每列設定為 300 畫素。

325
00:18:04,956 --> 00:18:08,384
我們可以說，周圍的內容空間決定了

326
00:18:08,584 --> 00:18:10,049
項的佈局。

327
00:18:10,110 --> 00:18:11,113
因此，即使在這種情況下...

328
00:18:11,455 --> 00:18:14,157
所有內容都是完全響應的，無需進行

329
00:18:14,459 --> 00:18:17,332
任何媒體查詢，這非常非常好。

330
00:18:17,633 --> 00:18:21,708
需要注意的是，在子專案上，我們根本不需要指定任何東西。

331
00:18:21,949 --> 00:18:23,635
這就是你應該如何處理網格。

332
00:18:23,655 --> 00:18:25,863
你不應該學習所有的屬性。

333
00:18:26,104 --> 00:18:30,257
實際上，你應該透過一步步學習如何使用它。

334
00:18:30,418 --> 00:18:33,344
有了 Flexbox，這就容易多了，而不是幸運。

335
00:18:33,684 --> 00:18:36,229
和 css 網格，如果你能正確地做到這些

336
00:18:36,650 --> 00:18:40,921
和 css 網格，就能最大限度地減少需要編寫的媒體查詢次數。

337
00:18:41,061 --> 00:18:45,562
現在，如果你看一下這個例子，這個網站主要是用 Flex 完成的。

338
00:18:46,024 --> 00:18:49,035
因此，如果你的螢幕較大，我們就使用中型螢幕。

339
00:18:49,215 --> 00:18:50,837
而且大部分都是響應式的。

340
00:18:50,957 --> 00:18:53,441
所以很多內容都能很好地融入到設計中。

341
00:18:53,722 --> 00:18:58,461
我們不必為中型螢幕處理大量的媒體查詢。

342
00:18:58,742 --> 00:19:03,155
現在，我們仍然需要為較小的螢幕使用媒體查詢，所以如果我們轉到

343
00:19:03,476 --> 00:19:06,611
這個尺寸，你可以看到這些元素

344
00:19:07,034 --> 00:19:09,233
會堆疊在一起。

345
00:19:09,394 --> 00:19:13,496
不過幸運的是，如果我們使用的是 Flexbox 或 Grid，就會非常簡單。

346
00:19:13,757 --> 00:19:17,811
我們要做的就是，例如在這個特殊的部分，有

347
00:19:18,213 --> 00:19:20,689
三個元素，這就是在中間留出空間的 Flexbox。

348
00:19:21,010 --> 00:19:24,066
我們在媒體查詢中要做的就是移除 Flex。

349
00:19:24,528 --> 00:19:26,551
然後它們就會自然地堆疊在一起。

350
00:19:26,872 --> 00:19:28,855
這是一種常見的模式，你可以這樣做

351
00:19:29,296 --> 00:19:32,768
很多不同的情況。

352
00:19:33,230 --> 00:19:37,969
我們所要做的就是在螢幕足夠小的時候移除撓性部分。

353
00:19:38,491 --> 00:19:39,396
這樣就比較合理了。

354
00:19:39,858 --> 00:19:42,733
現在，有時你確實需要做一些實驗來找出

355
00:19:42,833 --> 00:19:46,799
斷點在哪裡，但它讓生活變得非常簡單。

356
00:19:47,099 --> 00:19:51,420
一旦你正確設定了佈局，就可以進行響應式設計了。

357
00:19:51,641 --> 00:19:53,950
在我們討論了 flex 和

358
00:19:54,090 --> 00:19:57,282
網格，有時這些並不是最佳選擇。

359
00:19:58,125 --> 00:20:02,884
這時，我們可以將絕對定位和相對定位作為次要選擇。

360
00:20:03,265 --> 00:20:07,241
絕對定位非常強大，因為你可以把它放在螢幕上的任何位置，而且...

361
00:20:07,683 --> 00:20:10,462
絕對定位的作用不言自明，但是...

362
00:20:10,985 --> 00:20:14,056
當然，就像我提到的，絕對定位應該是次要選擇。

363
00:20:14,838 --> 00:20:18,572
很多時候，你會把絕對值和相對值結合起來使用。

364
00:20:18,792 --> 00:20:22,925
所以絕對定位和相對定位並不常用。

365
00:20:23,266 --> 00:20:26,393
在處理常規的企業級應用程式時，無論是

366
00:20:26,634 --> 00:20:31,292
電子商務或管理儀表盤，很多時候這些應用程式都是結構性的，而且具有很強的對稱性。

367
00:20:31,594 --> 00:20:32,639
很多對稱性。

368
00:20:32,900 --> 00:20:34,830
在處理設計網站時

369
00:20:35,091 --> 00:20:38,922
比如設計公司或著陸頁，雖然它們非常花哨，比如

370
00:20:39,123 --> 00:20:41,659
你會在 AWW 這個網站上看到。

371
00:20:42,726 --> 00:20:45,677
Awards.com上看到的那樣，它們非常注重設計。

372
00:20:45,858 --> 00:20:47,364
例如，像這個頁面。

373
00:20:47,886 --> 00:20:51,395
就像這個特殊的網站，你的元素是

374
00:20:51,696 --> 00:20:54,589
定位在非常規的位置。

375
00:20:55,231 --> 00:20:58,839
這就是使用絕對定位和相對定位的地方。

376
00:20:59,099 --> 00:21:02,460
因為當你的專案一般都是對角線型別的排列，或者它們是奇數時，就很難做到彈性定位。

377
00:21:02,600 --> 00:21:06,849
一般都是對角線型別的排列，或者它們有點分散

378
00:21:07,190 --> 00:21:08,997
整個網站。

379
00:21:09,238 --> 00:21:10,262
除了使用

380
00:21:10,623 --> 00:21:14,457
絕對定位和相對定位來在非常棘手的情況下放置專案。

381
00:21:14,938 --> 00:21:16,842
就像我們在設計師網站上看到的那樣。

382
00:21:17,082 --> 00:21:20,556
還有一種非常常見的情況是使用相對位置。

383
00:21:21,199 --> 00:21:24,372
絕對位置用於將專案置於另一個專案之上。

384
00:21:24,793 --> 00:21:27,179
所以，如果你看看這張卡片，對嗎？

385
00:21:27,621 --> 00:21:32,120
我們有兩個按鈕放在這個盒子的頂部。

386
00:21:32,642 --> 00:21:36,533
我們的做法是將整個框設定為相對位置。

387
00:21:37,155 --> 00:21:37,678
相對位置。

388
00:21:37,919 --> 00:21:41,376
我們還將圖片設定為整個框的子項。

389
00:21:41,879 --> 00:21:45,759
但我們還有另一個方框，它的位置是

390
00:21:46,322 --> 00:21:46,906
絕對位置。

391
00:21:47,269 --> 00:21:48,718
它的位置是底部。

392
00:21:49,100 --> 00:21:52,756
為 10%，左側為 0，這樣我們就有了

393
00:21:53,217 --> 00:21:55,764
這個特定的框元素。

394
00:21:56,025 --> 00:21:56,747
這樣一來

395
00:21:57,188 --> 00:22:00,140
我們有一個非常常見的模式，可以將父元素設定為

396
00:22:00,622 --> 00:22:03,596
父元素的位置為相對位置，而子元素的位置為絕對位置。

397
00:22:03,937 --> 00:22:06,543
這樣，我們就能將父元素設定為相對位置，而子元素則設定為絕對位置。

398
00:22:07,445 --> 00:22:09,832
這裡還有另一種情況...

399
00:22:10,433 --> 00:22:15,071
旋轉臺中的另一種情況，我們可以將這個專案的父項設定為相對位置，而子項設定為絕對位置。

400
00:22:15,191 --> 00:22:19,697
更高的旋轉木馬上，然後為這裡的這個特定專案設定子位置。

401
00:22:19,957 --> 00:22:23,631
另一個例子是這裡的圖片元素。

402
00:22:24,254 --> 00:22:27,109
和它後面的輪廓邊框。

403
00:22:27,893 --> 00:22:29,881
最後，這裡還有一個例子。

404
00:22:30,383 --> 00:22:33,761
我在做什麼？

405
00:22:34,182 --> 00:22:37,971
我們需要讓這段文字跟上這裡的原文。

406
00:22:38,733 --> 00:22:41,449
這樣一旦我們移動它，這個...

407
00:22:42,293 --> 00:22:44,139
大特克斯就會跟著埃沃-吉姆

408
00:22:44,701 --> 00:22:47,161
因此，我們要將

409
00:22:47,625 --> 00:22:49,733
父元素為相對元素。

410
00:22:50,415 --> 00:22:52,161
和一個子元素

411
00:22:52,702 --> 00:22:55,431
使用一個名為 "之前 "的選擇器

412
00:22:56,114 --> 00:22:59,313
再次將其設定為絕對元素，然後我們將其定位

413
00:22:59,754 --> 00:23:02,078
在其上方一點。

414
00:23:02,960 --> 00:23:07,458
並將其向左定位一點，這樣我們就可以從這裡開始，而不是在這個軸上。

415
00:23:07,819 --> 00:23:08,481
軸。

416
00:23:08,843 --> 00:23:10,207
正如你所看到的，絕對

417
00:23:10,247 --> 00:23:15,046
絕對定位和相對定位通常作為次要選項使用，尤其是對

418
00:23:15,427 --> 00:23:18,894
功能和應用程式型別的網站。

419
00:23:19,215 --> 00:23:22,390
當涉及到設計師類網站時，你就會使用它。

420
00:23:22,651 --> 00:23:25,360
但很多時候你是

421
00:23:25,581 --> 00:23:28,222
開發的更多是功能性應用程式。

422
00:23:28,625 --> 00:23:32,703
在這種情況下，您可以將相對定位和絕對定位

423
00:23:33,085 --> 00:23:35,541
和絕對定位相結合，並在不使用

424
00:23:36,204 --> 00:23:36,465
使用。

425
00:23:36,685 --> 00:23:39,491
就是這樣，這是我做過的最全面的 CSS 佈局

426
00:23:39,571 --> 00:23:44,497
影片，我想按照步驟一步一步來，這樣你就有了一個基礎

427
00:23:44,838 --> 00:23:47,366
或結構。

428
00:23:47,526 --> 00:23:50,151
因為很多人都不教這種基本的 CSS 佈局方法。

429
00:23:50,632 --> 00:23:53,679
的方法，而只是透過

430
00:23:54,921 --> 00:23:59,821
找到他們想修改的小地方，而不是打好基礎。

431
00:24:00,503 --> 00:24:01,866
總之，請點贊、評論、訂閱。

432
00:24:01,886 --> 00:24:03,169
下次見。
