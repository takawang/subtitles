1
00:00:05,690 --> 00:00:08,091
Every day I wake up in the morning and nothing gets me

2
00:00:08,191 --> 00:00:10,823
more excited than changing the same pixel values.

3
00:00:11,645 --> 00:00:16,052
20 times in a row to make me feel like I'm doing a huge valuable service to mankind.

4
00:00:16,312 --> 00:00:20,262
And since you guys are CSS experts according to my community post,

5
00:00:20,583 --> 00:00:24,831
I want to fulfill your lifelong ambition of becoming a CSS rock star.

6
00:00:25,031 --> 00:00:29,677
In this CSS layout guide, it's not about explaining every possible CSS property and value.

7
00:00:30,037 --> 00:00:32,691
because there are a ton of resources out there that can tell you how to do that.

8
00:00:32,972 --> 00:00:37,588
However, I want to mention how you should approach and think in CSS so that your CSS isn't

9
00:00:37,688 --> 00:00:40,319
chaos like our social abilities as an engineer.

10
00:00:40,620 --> 00:00:43,908
Now this works with any kind of CSS library, post processors, or components.

11
00:00:44,389 --> 00:00:47,338
or anything you can think of, because it's more about the approach.

12
00:00:47,659 --> 00:00:50,975
Now there's some rare articles that will explain what I'm talking about.

13
00:00:51,135 --> 00:00:55,995
But I want to cover that in the video and go further on how you can approach every little step.

14
00:00:56,476 --> 00:01:00,062
So when you are given a design that you need to implement with CSS,

15
00:01:00,543 --> 00:01:04,719
The very first thing you should be doing is visualizing everything in terms of boxes.

16
00:01:05,160 --> 00:01:07,870
And to start with, we want to talk about the CSS box model.

17
00:01:07,990 --> 00:01:12,011
So the CSS box model represents all the layers, a single box.

18
00:01:12,594 --> 00:01:14,880
So we include content, padding, border.

19
00:01:15,221 --> 00:01:19,940
in margin and by default css sets everything to be content box which you

20
00:01:20,222 --> 00:01:21,308
only includes content.

21
00:01:21,348 --> 00:01:23,380
So that represents one element.

22
00:01:23,621 --> 00:01:27,028
But if you set it to border box, you include the padding and the border.

23
00:01:27,188 --> 00:01:31,503
So once you understand the box model, now we can split our layout into different blocks.

24
00:01:31,925 --> 00:01:36,215
and we want to be able to visualize every element on the page as a block.

25
00:01:36,556 --> 00:01:39,974
As you can see here, we start from the outside and then we go inside.

26
00:01:40,356 --> 00:01:43,528
And we always start from the top and we go horizontally.

27
00:01:43,789 --> 00:01:48,424
We don't go vertically because divs naturally stack on top of each other.

28
00:01:48,584 --> 00:01:52,704
So we want to make sure we start horizontally splitting the elements.

29
00:01:53,187 --> 00:01:54,151
into different blocks.

30
00:01:54,513 --> 00:01:56,844
Now, for example, if we take the YouTube landing page.

31
00:01:57,125 --> 00:02:01,473
We can toggle this Chrome extension, which will allow us to see all the elements

32
00:02:01,633 --> 00:02:03,256
on this page as different boxes.

33
00:02:03,376 --> 00:02:05,800
So if you hover over this, we see the nav bar.

34
00:02:06,261 --> 00:02:08,186
We have another box over here as here and here.

35
00:02:09,590 --> 00:02:14,168
as well as each of the videos are a box in itself.

36
00:02:14,449 --> 00:02:18,863
And now you can imagine if you're using a framework, visualizing these boxes also helps.

37
00:02:19,425 --> 00:02:22,801
set up the components that you would need for something like React Vue.

38
00:02:23,465 --> 00:02:26,705
Angular or Svelte so these components are perfect

39
00:02:27,007 --> 00:02:28,374
for those boxes.

40
00:02:28,756 --> 00:02:30,767
And as we've seen with some of the layouts,

41
00:02:31,290 --> 00:02:33,988
Some of the most important things to understand is that everything...

42
00:02:34,471 --> 00:02:36,540
has a parent-child relationship.

43
00:02:37,143 --> 00:02:39,541
So every element here has both a parent

44
00:02:40,246 --> 00:02:40,829
and a child.

45
00:02:43,243 --> 00:02:47,341
will be very key to understanding how we can use Flexbox and Grid

46
00:02:47,783 --> 00:02:49,031
for a lot of our layouts.

47
00:02:49,453 --> 00:02:50,339
Now visualizing

48
00:02:50,641 --> 00:02:52,896
or layouts via blocks really helps.

49
00:02:53,237 --> 00:02:57,505
set the foundation and the structure of our entire CSS code.

50
00:02:57,866 --> 00:03:02,685
and that helps us utilize a very important tool that we know as Flexbox.

51
00:03:03,065 --> 00:03:06,430
Now there are several tools for positioning things on the website.

52
00:03:06,570 --> 00:03:10,407
But the number one tool you should always reach for is going to be Flexbox.

53
00:03:10,849 --> 00:03:13,467
There's another tool called float that you can use to

54
00:03:13,527 --> 00:03:18,447
position things, but it is the outdated way of positioning and you should only use it if you.

55
00:03:19,549 --> 00:03:22,374
When it comes to Flexbox vs Absolute Positioning, a lot of people

56
00:03:22,634 --> 00:03:27,534
tend to use absolute positioning as their default method, which I believe is a basic mistake.

57
00:03:27,895 --> 00:03:29,159
And there are a few reasons why.

58
00:03:29,320 --> 00:03:31,426
First off, it's harder on responsive design.

59
00:03:31,687 --> 00:03:33,882
For example, if you have something that's set to 150 pixel.

60
00:03:35,149 --> 00:03:37,477
from the right side of the screen, it's going

61
00:03:37,537 --> 00:03:41,274
to be in a very drastically different position for a screen of 3000 pixels.

62
00:03:42,600 --> 00:03:46,014
versus a mobile screen which is 300 pixel where 150 pixels from the right would

63
00:03:47,500 --> 00:03:48,433
would be in the center.

64
00:03:48,772 --> 00:03:53,195
And on top of that, that leads to you designing in a specific pixel.

65
00:03:53,396 --> 00:03:55,934
perfect manner, which is not ideal.

66
00:03:56,195 --> 00:04:01,049
Now there's a bigger reason why you should always use flexbox vs absolute positioning and that's because

67
00:04:01,391 --> 00:04:04,989
Flexbox does not disturb the flow of the layout.

68
00:04:05,290 --> 00:04:09,987
What that means is that if you take a look at this layout and you look at this nav bar,

69
00:04:10,229 --> 00:04:12,301
Every item is in relation to each other.

70
00:04:12,442 --> 00:04:13,730
For example, this item

71
00:04:14,071 --> 00:04:18,759
is related to this because they're on the same line and they're kind of positioned to the right.

72
00:04:19,080 --> 00:04:22,094
However, if you take a look at this, this night time...

73
00:04:22,576 --> 00:04:27,097
icon and you remove it what happens is none of these other items

74
00:04:27,378 --> 00:04:32,258
move which is not ideal sometimes you do not want this big of a space between these two items

75
00:04:32,539 --> 00:04:34,646
And let's actually also take out this profile.

76
00:04:34,807 --> 00:04:38,775
And now we just have a big gap between these items and this.

77
00:04:39,036 --> 00:04:42,039
requires us to position this and move this over here.

78
00:04:42,119 --> 00:04:43,704
here which is quite the hassle.

79
00:04:43,764 --> 00:04:45,771
In contrast, let's look at Flexbox.

80
00:04:46,091 --> 00:04:50,357
We have these items again and let's see what happens when we take out these settings.

81
00:04:51,079 --> 00:04:54,296
We can see that this has been moved over along with this.

82
00:04:54,637 --> 00:04:56,343
And then let's actually take out the profile icon.

83
00:04:57,005 --> 00:04:59,934
And as you can see, it's been moved, aligned over here.

84
00:05:00,194 --> 00:05:04,133
So it's very easy to have it set up in a way that we would like.

85
00:05:05,218 --> 00:05:08,430
way easier because we are following the flow of the layout.

86
00:05:08,611 --> 00:05:09,856
They have a relationship.

87
00:05:10,358 --> 00:05:13,491
where with the other positions of each item is.

88
00:05:13,792 --> 00:05:14,936
So even in the search bar,

89
00:05:15,458 --> 00:05:19,693
This is positioned to the right of this along with the search which is on the left side.

90
00:05:20,034 --> 00:05:24,260
So there's always this flow dynamic with a lot of items on.

91
00:05:24,500 --> 00:05:27,426
page and for that reason having Flexbox.

92
00:05:27,887 --> 00:05:29,534
it's way easier to maintain.

93
00:05:29,634 --> 00:05:30,959
If you've ever tried to

94
00:05:31,340 --> 00:05:34,565
fix up a code base where everything's absolutely positioned.

95
00:05:34,987 --> 00:05:38,087
you'll start to realize this becomes a nightmare to maintain.

96
00:05:38,490 --> 00:05:41,087
because you have to constantly calculate pixels.

97
00:05:41,610 --> 00:05:43,393
place things in different locations.

98
00:05:43,614 --> 00:05:45,717
Flexbox is the ideal tool

99
00:05:46,078 --> 00:05:48,849
when it comes to most applications and most websites.

100
00:05:49,150 --> 00:05:52,061
Now Flexbox has a lot of properties going on with it.

101
00:05:52,543 --> 00:05:55,429
but there's actually only a few properties that you really need to know.

102
00:05:55,669 --> 00:05:58,037
And it's very important to understand that.

103
00:05:58,177 --> 00:06:00,751
parent-child relationships I mentioned before.

104
00:06:01,314 --> 00:06:04,819
because you're going to use different properties on the parent element.

105
00:06:05,279 --> 00:06:07,363
of all the children in Flexbox.

106
00:06:07,924 --> 00:06:11,858
So the parent attributes are going to have all of these properties you see here.

107
00:06:12,119 --> 00:06:15,640
but the ones that we concern ourselves is just gonna be

108
00:06:16,283 --> 00:06:18,928
display, justify content, and align.

109
00:06:19,429 --> 00:06:23,157
Items these three properties are the only properties that you really need to know

110
00:06:23,719 --> 00:06:26,394
and even with justified content and aligned items.

111
00:06:26,977 --> 00:06:28,945
There's only a few properties of each of those.

112
00:06:30,009 --> 00:06:33,337
Xbox, it is very handy to have a cheat sheet at your disposal.

113
00:06:34,279 --> 00:06:37,766
utilize this to see and visualize what these properties are doing.

114
00:06:38,989 --> 00:06:43,445
justify-content is going to be the most commonly used Flexbox parent property that you will

115
00:06:43,726 --> 00:06:44,309
need to use.

116
00:06:44,912 --> 00:06:48,348
And justify-content aligns the items or the children

117
00:06:48,830 --> 00:06:52,620
in a horizontal direction or whichever direction is the default.

118
00:06:52,921 --> 00:06:57,062
So we have flex-start, flex-end, center, space between, and then space around.

119
00:06:57,686 --> 00:07:00,500
So space between, space around, center are the most

120
00:07:00,621 --> 00:07:03,619
common and then occasionally you will use flex start flex end.

121
00:07:03,941 --> 00:07:06,838
And then the second most commonly used alignment.

122
00:07:07,360 --> 00:07:09,126
is going to be align content which is

123
00:07:09,628 --> 00:07:14,267
Pretty much the same thing as justify-content, but it's going to align things vertically.

124
00:07:14,508 --> 00:07:18,674
So we have flex-start, flex-end, center, space between, and space around.

125
00:07:19,235 --> 00:07:23,108
The most commonly one you're going to be using is going to be center because

126
00:07:23,168 --> 00:07:26,762
a lot of times we're just going to align one horizontal line.

127
00:07:27,003 --> 00:07:31,250
So even in a basic example, you can see that this is flex right here.

128
00:07:31,630 --> 00:07:35,676
And then we're using space between for this particular div, spacing everything out.

129
00:07:36,056 --> 00:07:38,522
And then same thing over here, this is another parent.

130
00:07:38,883 --> 00:07:41,848
And then these are the child with these navigation items.

131
00:07:42,269 --> 00:07:43,854
and these are doing space between.

132
00:07:44,295 --> 00:07:44,616
Note that

133
00:07:44,636 --> 00:07:47,220
that up here, we're also vertically aligning them.

134
00:07:47,260 --> 00:07:49,123
So we're using line content center.

135
00:07:49,564 --> 00:07:53,740
So this is one of the most common ways you can use Flex to set up your...

136
00:07:54,282 --> 00:07:58,164
Layouts and now there's another property you can use flex-wrap

137
00:07:58,325 --> 00:08:02,447
but I'm going to show you ways so that you don't ever need to use flex-wrap.

138
00:08:02,668 --> 00:08:05,078
Now when it comes to the child properties of Flexbox,

139
00:08:05,580 --> 00:08:09,415
There's only a few properties that you really have to know and you're only going to use it occasionally.

140
00:08:09,737 --> 00:08:13,738
So flex-grow for example is if you set this to be zero it's going to take up

141
00:08:14,099 --> 00:08:17,416
the amount of space that you would normally expect it to, but if you click on one.

142
00:08:17,898 --> 00:08:20,445
It's going to grow as much as possible if there's extra space.

143
00:08:21,048 --> 00:08:22,033
in this element.

144
00:08:22,355 --> 00:08:24,025
And we also have flex-basis, so

145
00:08:24,306 --> 00:08:27,356
It's very complex on what flex-basis does over width.

146
00:08:27,577 --> 00:08:29,544
but it's basically the same thing as width with a...

147
00:08:30,046 --> 00:08:33,399
few additional properties and that interacts better with Flexbox.

148
00:08:33,519 --> 00:08:37,200
Now I'm going to leave a link in the description if you want to go in depth about

149
00:08:37,682 --> 00:08:42,332
flex bases, but you should always flex bases over width when you're using Flexbox.

150
00:08:42,614 --> 00:08:44,953
So flex is good for situations like this where there's

151
00:08:45,415 --> 00:08:48,647
one dimension, meaning it's either horizontal or vertical.

152
00:08:49,249 --> 00:08:51,421
but if you have a section where it's kinda like this

153
00:08:52,185 --> 00:08:55,185
where there is both horizontal and vertical elements.

154
00:08:55,788 --> 00:08:57,653
then grid is the better option.

155
00:08:57,952 --> 00:09:02,852
Now even in a situation like this where we just have a list of items displayed in a gallery like format.

156
00:09:02,932 --> 00:09:07,722
But grid is still pretty very easy to implement and we can just do this in three lines of

157
00:09:07,802 --> 00:09:08,023
code.

158
00:09:08,243 --> 00:09:12,433
However, if we try to use flex, there's actually a problem with using flex in this case.

159
00:09:12,774 --> 00:09:16,661
we tend to have no problems with the first line but the second line where we have

160
00:09:17,384 --> 00:09:19,459
not three items, we have two items.

161
00:09:19,841 --> 00:09:20,825
This becomes a problem.

162
00:09:20,925 --> 00:09:23,875
We cannot fix this without some hacky workaround.

163
00:09:24,136 --> 00:09:26,042
So let's take a look at another example.

164
00:09:26,664 --> 00:09:27,607
pretty simple layout.

165
00:09:27,708 --> 00:09:29,975
This is a common magazine type layout.

166
00:09:30,337 --> 00:09:33,892
And over here, we have the code that represents this type of grid.

167
00:09:34,435 --> 00:09:38,471
And now if you take a look with the flex, you're going to have to set this flex into two.

168
00:09:39,273 --> 00:09:42,139
separate sections and then over here this would be

169
00:09:42,682 --> 00:09:45,001
the entire width and this would be half of that width.

170
00:09:45,222 --> 00:09:47,167
Compare that with grid.

171
00:09:47,688 --> 00:09:50,417
This will produce the exact same results right here.

172
00:09:50,980 --> 00:09:53,400
It's just the code will now be much cleaner.

173
00:09:53,641 --> 00:09:57,773
Now grid is very scary at first because there's so many different options and there's so many different

174
00:09:57,934 --> 00:10:00,282
ways to go about using Grid, but I want

175
00:10:00,302 --> 00:10:04,751
to show you a very simple step-by-step guide on how to approach Grid and there's not

176
00:10:05,172 --> 00:10:06,884
a lot of things you actually have to know.

177
00:10:07,106 --> 00:10:07,750
So the first step

178
00:10:08,253 --> 00:10:11,830
in understanding grid is that we want to split it into the smallest

179
00:10:12,031 --> 00:10:13,864
divisible unit for columns.

180
00:10:14,125 --> 00:10:14,850
So if we take a look

181
00:10:15,071 --> 00:10:18,597
At this example, this particular section where we have this huge grid.

182
00:10:18,958 --> 00:10:23,452
and we have different varying sizes of boxes, we can take a look at this first row.

183
00:10:23,733 --> 00:10:26,267
So we can try and split this into 1 unit, 2 unit, 3 unit.

184
00:10:27,634 --> 00:10:32,534
four unit because these are small boxes we can say there's four columns in this particular grid.

185
00:10:33,137 --> 00:10:35,970
But the problem is if we take a look at this bottom box.

186
00:10:36,371 --> 00:10:38,861
This is not going to fit neatly into those

187
00:10:39,744 --> 00:10:43,496
particular four columns because this kind of overlaps if you take a look right here.

188
00:10:43,837 --> 00:10:47,307
this finishes three fourths of the way of this particular box.

189
00:10:47,327 --> 00:10:47,849
So it doesn't

190
00:10:48,350 --> 00:10:50,420
neatly fit into that unit.

191
00:10:50,440 --> 00:10:51,544
So what we can do...

192
00:10:52,027 --> 00:10:56,625
instead is going to divide this into smaller amount of units and we can say this will be

193
00:10:57,609 --> 00:10:59,760
3 units, so each of these box will be 3 units.

194
00:11:00,603 --> 00:11:04,417
So that would be a total of 12 columns across.

195
00:11:04,818 --> 00:11:08,644
And then we can say this bottom one is now going to be four columns.

196
00:11:09,287 --> 00:11:11,363
And if we could click on this, we can now see

197
00:11:11,947 --> 00:11:14,414
that this first box represents three columns.

198
00:11:14,615 --> 00:11:17,168
and this bottom box represents four columns.

199
00:11:17,589 --> 00:11:21,962
So that will now work out with this particular grid and then we can also check

200
00:11:22,102 --> 00:11:25,642
the middle one and this will be 8 units across.

201
00:11:26,064 --> 00:11:28,391
And now we can also take a look at the rows.

202
00:11:28,572 --> 00:11:30,297
So if we take a look, we're going to have

203
00:11:30,659 --> 00:11:32,993
five units of rows vertically.

204
00:11:33,215 --> 00:11:35,917
So the first row is going to just be one unit.

205
00:11:36,038 --> 00:11:40,981
but then the second row is going to involve two units and the last one is also going to be two units.

206
00:11:41,362 --> 00:11:44,008
So that means what we have set up.

207
00:11:44,429 --> 00:11:48,504
for our grid is that we now have 12 columns of units.

208
00:11:49,126 --> 00:11:51,377
and then five rows of units.

209
00:11:51,738 --> 00:11:53,647
And that is what we're going to be using

210
00:11:53,928 --> 00:11:54,892
to set up our grid.

211
00:11:56,457 --> 00:11:58,624
the level of complexity of the design.

212
00:11:58,905 --> 00:12:01,596
we are going to use different methods for grids.

213
00:12:01,997 --> 00:12:06,089
in three different scenarios and I'm going to go through and walk through each type.

214
00:12:06,249 --> 00:12:08,537
Now going back to our admin dashboard, I would

215
00:12:08,697 --> 00:12:12,376
Consider this a medium level of complexity when we use GRID.

216
00:12:12,797 --> 00:12:17,083
The way I determined that is most of the items there is some consistency.

217
00:12:17,383 --> 00:12:19,290
in the box sizings.

218
00:12:19,872 --> 00:12:21,140
but there are some differences.

219
00:12:21,220 --> 00:12:22,467
So we are going to...

220
00:12:23,110 --> 00:12:27,499
specify each item and we're going to give each item their own level of units.

221
00:12:27,900 --> 00:12:31,452
So the way we start is setting the parent to be display of grid.

222
00:12:31,774 --> 00:12:33,902
and then we can use grid template column.

223
00:12:33,942 --> 00:12:36,613
So this is going to be the most commonly used property

224
00:12:36,754 --> 00:12:38,240
that you'll end up using.

225
00:12:38,501 --> 00:12:40,630
And you're going to need to get familiar with

226
00:12:40,931 --> 00:12:43,255
the repeat function inside here.

227
00:12:43,495 --> 00:12:44,397
And all this means

228
00:12:44,597 --> 00:12:49,208
is that we're setting up this to be 12 columns like we mentioned before.

229
00:12:49,629 --> 00:12:51,763
and we are going to set each column

230
00:12:52,105 --> 00:12:54,517
with the size of one fractional unit.

231
00:12:54,879 --> 00:12:59,718
Now you can set this to be pixels and you can change this up depending on what you want.

232
00:13:00,220 --> 00:13:03,750
but here this is pretty simple so that means we're just dividing

233
00:13:04,051 --> 00:13:08,252
based on the number of units that this row has.

234
00:13:08,654 --> 00:13:13,413
So, it is one fractional unit for 12 different columns.

235
00:13:13,774 --> 00:13:18,312
So this is basically the width of each column and this is the total number of columns.

236
00:13:18,654 --> 00:13:21,875
And then for the rows, we have grid auto rows.

237
00:13:22,196 --> 00:13:25,844
So that means each row in this case, we're not using.

238
00:13:26,004 --> 00:13:28,735
template rows so we don't use

239
00:13:29,177 --> 00:13:31,080
units, we're actually setting this to be 150 pixels.

240
00:13:32,603 --> 00:13:34,509
So that means this particular row is 150.

241
00:13:35,773 --> 00:13:39,509
and since this is two units this is going to be three hundred and

242
00:13:39,951 --> 00:13:42,543
300 pixels right here for this particular box.

243
00:13:43,005 --> 00:13:44,872
And we also set a gap of 20 pixels.

244
00:13:44,912 --> 00:13:47,824
That just means 20 pixels spacing in between.

245
00:13:48,005 --> 00:13:50,297
And then from here, it's pretty simple.

246
00:13:50,961 --> 00:13:53,380
So we can now set the first box

247
00:13:53,601 --> 00:13:55,615
it's going to be a span of three.

248
00:13:55,897 --> 00:13:56,824
We don't need to set

249
00:13:57,065 --> 00:14:01,093
grid row to be span of one because that's what it is by default.

250
00:14:01,494 --> 00:14:04,582
But if we take a look and we go down and we go to row two.

251
00:14:05,184 --> 00:14:09,503
We now have a grid column of span of 8, which represents this particular guy.

252
00:14:10,005 --> 00:14:12,996
and then we set a span of 2 for the rows.

253
00:14:13,418 --> 00:14:16,867
And then this, as you can guess, is going to be a span of four.

254
00:14:17,228 --> 00:14:18,693
and a grid row span of two.

255
00:14:18,934 --> 00:14:19,616
And now you can see

256
00:14:19,797 --> 00:14:24,596
that this is going to be grid column span of three with a span of two rows.

257
00:14:24,936 --> 00:14:28,782
And as you can see, this is pretty simple once you have that unit layout.

258
00:14:29,142 --> 00:14:31,366
for each column and the number of rows.

259
00:14:32,327 --> 00:14:36,926
you can easily set the specified spans to be what you

260
00:14:37,648 --> 00:14:39,735
want exactly it just takes a little

261
00:14:39,815 --> 00:14:42,225
bit of effort dividing the number of columns.

262
00:14:42,747 --> 00:14:47,225
and the number of rows but once you have that you have very good control

263
00:14:47,727 --> 00:14:50,443
of how much space each element is going to take.

264
00:14:50,603 --> 00:14:53,996
Now before we were doing admin that had a very consistent level of

265
00:14:54,096 --> 00:14:56,424
boxes so there is a little bit of symmetry and

266
00:14:56,685 --> 00:14:58,372
consistency with that layout.

267
00:14:58,452 --> 00:14:59,617
But this one right here...

268
00:14:59,938 --> 00:15:03,143
we have boxes that span different vertical elements.

269
00:15:03,223 --> 00:15:04,345
And I would consider that

270
00:15:04,685 --> 00:15:08,620
in a situation where this becomes an advanced complexity for grid.

271
00:15:08,760 --> 00:15:12,108
and that's where we are going to use grid template areas.

272
00:15:12,490 --> 00:15:15,989
and grid template areas gives us maximum full control and an

273
00:15:16,049 --> 00:15:20,460
It also allows us to maintain this type of CSS code very easily.

274
00:15:20,760 --> 00:15:24,957
So the way we do this is we're going to set our columns and the rows as usual.

275
00:15:25,218 --> 00:15:28,516
Most importantly, we are setting grid template areas.

276
00:15:28,857 --> 00:15:31,805
So the way this works is that instead

277
00:15:32,146 --> 00:15:35,464
of giving each box or element inside the grid

278
00:15:35,886 --> 00:15:38,117
a specific length and height.

279
00:15:38,439 --> 00:15:39,424
We are instead

280
00:15:39,705 --> 00:15:41,852
specifying kind of like a mini-map.

281
00:15:42,113 --> 00:15:46,521
or diagram of sorts to identify where things go in the grid.

282
00:15:46,721 --> 00:15:51,012
So, for example, AAA, these are consistent, that represents

283
00:15:51,112 --> 00:15:52,695
this particular box over here.

284
00:15:52,836 --> 00:15:55,281
So A represents this particular element.

285
00:15:55,481 --> 00:15:58,736
B represents this one and then C represents this one.

286
00:15:58,857 --> 00:16:00,103
So C is three

287
00:16:00,625 --> 00:16:04,095
Units vertically and we can see these over here, and this would be

288
00:16:04,195 --> 00:16:08,974
three units vertically, E would be two units vertically, and then F would be three units vertically.

289
00:16:09,316 --> 00:16:12,614
but this one would overlap on the fourth row.

290
00:16:13,055 --> 00:16:17,245
and we can continue doing the same with g g g and then h h h would be

291
00:16:17,466 --> 00:16:19,980
four units vertically with ii and jj.

292
00:16:20,784 --> 00:16:24,239
So that allows us to control these elements.

293
00:16:24,440 --> 00:16:26,648
And the way we identify each box is

294
00:16:26,909 --> 00:16:29,158
is we're going to call this grid area.

295
00:16:29,218 --> 00:16:31,608
So now all we have to do is we can go to our

296
00:16:32,230 --> 00:16:35,081
box and go down and specify this is a

297
00:16:35,644 --> 00:16:38,858
a custom component that I created, but this is grid area A.

298
00:16:39,079 --> 00:16:44,019
that represents this particular section, and then grid area B represents this, and C represents

299
00:16:44,179 --> 00:16:44,439
that.

300
00:16:44,640 --> 00:16:48,404
So now we don't actually have to worry about the order of the elements when we play

301
00:16:48,544 --> 00:16:51,599
place in the components, we can just set this

302
00:16:51,940 --> 00:16:53,323
to be the proper grid area.

303
00:16:53,363 --> 00:16:55,787
I could call this C instead if I wanted to.

304
00:16:56,067 --> 00:16:59,920
And that would just make this one particular C. We could change this like that.

305
00:17:00,181 --> 00:17:03,481
and that would just change it up like this so we would replace those

306
00:17:03,702 --> 00:17:04,023
items.

307
00:17:04,204 --> 00:17:08,541
So as you can see, it can be a very easy swap with this type of layout.

308
00:17:08,861 --> 00:17:13,467
And then we would continue doing the same thing for D, E, F, and then G, H, and D.

309
00:17:14,491 --> 00:17:18,507
And with that, we would have our grid template area for our entire screen.

310
00:17:18,788 --> 00:17:23,366
So I highly recommend using grid template areas when you have a when you basically have

311
00:17:23,507 --> 00:17:24,751
chaos in your layouts.

312
00:17:24,951 --> 00:17:27,558
Now this is kind of an exception, this last type

313
00:17:27,900 --> 00:17:30,478
of GridLayout, you actually didn't need to setup

314
00:17:30,678 --> 00:17:34,647
The smallest divisible unit for columns and rows for this type of situation

315
00:17:34,867 --> 00:17:38,847
which is when you have something like this as you see in this e-commerce website.

316
00:17:39,028 --> 00:17:41,642
This is when all the items or all the children.

317
00:17:41,983 --> 00:17:44,332
are basically the same width and the same height.

318
00:17:44,413 --> 00:17:46,240
So we don't actually need to set up.

319
00:17:46,440 --> 00:17:50,090
the width or the height or the number of columns or the number of rows.

320
00:17:50,230 --> 00:17:52,928
And the way we do this is we just set this to display to be

321
00:17:53,089 --> 00:17:56,124
grid and we can set grid template columns to repeat.

322
00:17:56,526 --> 00:17:58,631
and we can set this to be autofill.

323
00:17:58,792 --> 00:18:00,677
So it determines the number of columns

324
00:18:01,179 --> 00:18:03,389
for us, and we set each column to be 300 pixels.

325
00:18:04,956 --> 00:18:08,384
and we can say justify content space around that determines how

326
00:18:08,584 --> 00:18:10,049
the items are going to be laid out.

327
00:18:10,110 --> 00:18:11,113
So even in this case...

328
00:18:11,455 --> 00:18:14,157
Everything is completely responsive without us doing

329
00:18:14,459 --> 00:18:17,332
any kind of media queries, which is very, very nice.

330
00:18:17,633 --> 00:18:21,708
And just to note, on the children we don't have to specify anything at all.

331
00:18:21,949 --> 00:18:23,635
And that's how you should approach grid.

332
00:18:23,655 --> 00:18:25,863
You shouldn't approach by learning all the properties.

333
00:18:26,104 --> 00:18:30,257
you should actually approach it by following a step-by-step guide on how to use it.

334
00:18:30,418 --> 00:18:33,344
which is much easier, not fortunately, with Flexbox.

335
00:18:33,684 --> 00:18:36,229
and css grid if you manage to do these

336
00:18:36,650 --> 00:18:40,921
correctly, it'll minimize the number of media queries you would have to write.

337
00:18:41,061 --> 00:18:45,562
Now if you take a look at this example, this particular website is mostly done with Flex.

338
00:18:46,024 --> 00:18:49,035
So if you have a larger screen, we go to medium size screens.

339
00:18:49,215 --> 00:18:50,837
and most of it is responsive.

340
00:18:50,957 --> 00:18:53,441
So a lot of this will be properly fit.

341
00:18:53,722 --> 00:18:58,461
into the design and we don't have to deal with a lot of media queries for medium-sized screens.

342
00:18:58,742 --> 00:19:03,155
Now we still do have to use media queries for smaller screens so if we go to

343
00:19:03,476 --> 00:19:06,611
this size as you can see these elements

344
00:19:07,034 --> 00:19:09,233
have stacked on top of each other.

345
00:19:09,394 --> 00:19:13,496
But fortunately, if we're using Flexbox or Grid, it is quite simple.

346
00:19:13,757 --> 00:19:17,811
all we have to do for example in this particular section where there is

347
00:19:18,213 --> 00:19:20,689
three elements and this is flex with space between.

348
00:19:21,010 --> 00:19:24,066
All we have to do in the media query is remove the flex.

349
00:19:24,528 --> 00:19:26,551
and they'll naturally stack on top of each other.

350
00:19:26,872 --> 00:19:28,855
And this is a common pattern that you can do

351
00:19:29,296 --> 00:19:32,768
for a lot of different situations where we have flex over here.

352
00:19:33,230 --> 00:19:37,969
And all we have to do is remove that flex when the screen has gotten small enough.

353
00:19:38,491 --> 00:19:39,396
where it's reasonable.

354
00:19:39,858 --> 00:19:42,733
Now sometimes you do have to do some experimentation to figure out

355
00:19:42,833 --> 00:19:46,799
where that break point is, but it makes life very easy.

356
00:19:47,099 --> 00:19:51,420
to do a responsive design once you have this layout all set up correctly.

357
00:19:51,641 --> 00:19:53,950
Now after we've talked about flex and

358
00:19:54,090 --> 00:19:57,282
grid and sometimes those are not the best options.

359
00:19:58,125 --> 00:20:02,884
then we can resort to absolute and relative positioning as a secondary choice.

360
00:20:03,265 --> 00:20:07,241
Absolute is very powerful because you can place it anywhere on the screen and it's...

361
00:20:07,683 --> 00:20:10,462
pretty self-explanatory what to do with it, but...

362
00:20:10,985 --> 00:20:14,056
Of course, like I mentioned, should be a secondary option.

363
00:20:14,838 --> 00:20:18,572
And a lot of times you use absolute in combination with relative.

364
00:20:18,792 --> 00:20:22,925
So absolute and relative positioning are not so common to be using when you're

365
00:20:23,266 --> 00:20:26,393
dealing with regular enterprise level applications, whether it's

366
00:20:26,634 --> 00:20:31,292
e-commerce or an admin dashboard, a lot of times those are very structural and it has

367
00:20:31,594 --> 00:20:32,639
A lot of symmetry.

368
00:20:32,900 --> 00:20:34,830
When you're dealing with design websites.

369
00:20:35,091 --> 00:20:38,922
like design agencies or landing pages that are extremely fancy though like

370
00:20:39,123 --> 00:20:41,659
ones you would see on this particular website, AWW.

371
00:20:42,726 --> 00:20:45,677
Awards.com where they're very design based.

372
00:20:45,858 --> 00:20:47,364
For example, like this page.

373
00:20:47,886 --> 00:20:51,395
like this particular website and you have elements that are

374
00:20:51,696 --> 00:20:54,589
positioned in very unconventional locations.

375
00:20:55,231 --> 00:20:58,839
This is where you would use absolute and relative positioning.

376
00:20:59,099 --> 00:21:02,460
because it is very hard to do flex when you have items that are

377
00:21:02,600 --> 00:21:06,849
generally in diagonal type formations or they're kind of scattered

378
00:21:07,190 --> 00:21:08,997
throughout the entire website.

379
00:21:09,238 --> 00:21:10,262
Now aside from using

380
00:21:10,623 --> 00:21:14,457
Position absolute and relative for placing items in very tricky situations.

381
00:21:14,938 --> 00:21:16,842
like we've seen in that designer website.

382
00:21:17,082 --> 00:21:20,556
There is a very common occurrence of using position relative.

383
00:21:21,199 --> 00:21:24,372
absolute for placing items on top of another item.

384
00:21:24,793 --> 00:21:27,179
So if you take a look at this card, right?

385
00:21:27,621 --> 00:21:32,120
we have these two buttons that are placed on top of this box.

386
00:21:32,642 --> 00:21:36,533
And the way we do this is we set this entire box to be positioned

387
00:21:37,155 --> 00:21:37,678
relative.

388
00:21:37,919 --> 00:21:41,376
We also set the image as the child of this entire box.

389
00:21:41,879 --> 00:21:45,759
but we have another box that represents a position of

390
00:21:46,322 --> 00:21:46,906
Absolute.

391
00:21:47,269 --> 00:21:48,718
And that is positioned bottom.

392
00:21:49,100 --> 00:21:52,756
of 10% with the left of 0 and that gives us

393
00:21:53,217 --> 00:21:55,764
this particular box element right here.

394
00:21:56,025 --> 00:21:56,747
By doing so,

395
00:21:57,188 --> 00:22:00,140
We have a very common pattern where we can set the parent

396
00:22:00,622 --> 00:22:03,596
with a position of relative and a child of position absolute.

397
00:22:03,937 --> 00:22:06,543
for any items that we want to place on top of another.

398
00:22:07,445 --> 00:22:09,832
And this is another situation over here in this...

399
00:22:10,433 --> 00:22:15,071
carousel we can place this item using a parent a position relative on the entire

400
00:22:15,191 --> 00:22:19,697
higher carousel and then child for this particular item over here.

401
00:22:19,957 --> 00:22:23,631
Another example can be seen here in this element over here with this image.

402
00:22:24,254 --> 00:22:27,109
and this outline border that's behind it.

403
00:22:27,893 --> 00:22:29,881
And finally, in another example over here.

404
00:22:30,383 --> 00:22:33,761
what I'm doing with this particular text that's in the background.

405
00:22:34,182 --> 00:22:37,971
We need that text to follow this original over here.

406
00:22:38,733 --> 00:22:41,449
so that once we move it, this...

407
00:22:42,293 --> 00:22:44,139
Big Tex is following Evo Jim.

408
00:22:44,701 --> 00:22:47,161
So the way to do that is that we are setting

409
00:22:47,625 --> 00:22:49,733
the parent element again to relative.

410
00:22:50,415 --> 00:22:52,161
and a child element.

411
00:22:52,702 --> 00:22:55,431
that is using a selector called before.

412
00:22:56,114 --> 00:22:59,313
again and setting that to be absolute and we position this

413
00:22:59,754 --> 00:23:02,078
a little to the top above it.

414
00:23:02,960 --> 00:23:07,458
and positioning it a little to the left so we start from over here instead of on

415
00:23:07,819 --> 00:23:08,481
this axis.

416
00:23:08,843 --> 00:23:10,207
And as you can see, absolutely

417
00:23:10,247 --> 00:23:15,046
Absolute and relative positioning are generally used as a secondary option especially for

418
00:23:15,427 --> 00:23:18,894
functional and application type websites.

419
00:23:19,215 --> 00:23:22,390
When it comes to designer-like websites, then you would use it.

420
00:23:22,651 --> 00:23:25,360
way more frequently but a lot of times you are

421
00:23:25,581 --> 00:23:28,222
developing on more of a functional application.

422
00:23:28,625 --> 00:23:32,703
and in those cases you use relative and absolute positioning as a

423
00:23:33,085 --> 00:23:35,541
combination and in sparing

424
00:23:36,204 --> 00:23:36,465
use it.

425
00:23:36,685 --> 00:23:39,491
And there you go, this is the most comprehensive CSS layout

426
00:23:39,571 --> 00:23:44,497
video I've ever done and I wanted to follow the step-by-step process so you have a foundation

427
00:23:44,838 --> 00:23:47,366
or structure for your CSS layouts.

428
00:23:47,526 --> 00:23:50,151
because a lot of people don't teach this fundamental.

429
00:23:50,632 --> 00:23:53,679
approach to CSS instead they just go through and

430
00:23:54,921 --> 00:23:59,821
find little things that they want to change instead of setting up the foundation.

431
00:24:00,503 --> 00:24:01,866
Anyways, like, comment, subscribe.

432
00:24:01,886 --> 00:24:03,169
See you next time.

